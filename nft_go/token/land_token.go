// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LandTokenMetaData contains all meta data concerning the LandToken contract.
var LandTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"name\":\"SecondarySaleFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RPercebtage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RRecipientAddress\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000206565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a9565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001205760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001179190620001e9565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019160278362000122565b91506200019e8262000133565b604082019050919050565b60006020820190508181036000830152620001c48162000182565b9050919050565b600060ff82169050919050565b620001e381620001cb565b82525050565b6000602082019050620002006000830184620001d8565b92915050565b6080516178336200023e60003960008181610ef901528181610f8701528181611132015281816111c0015261142b01526178336000f3fe6080604052600436106102675760003560e01c80636352211e11610144578063b9c4d9fb116100b6578063d547741f1161007a578063d547741f14610955578063dc2140551461097e578063e02023a11461099a578063e63ab1e9146109c5578063e985e9c5146109f0578063f72c0d8b14610a2d57610267565b8063b9c4d9fb1461084a578063c602ac1414610887578063c87b56dd146108b0578063d1abfc9b146108ed578063d53913931461092a57610267565b806391d148541161010857806391d148541461073c57806395d89b4114610779578063a217fddf146107a4578063a22cb465146107cf578063a6487c53146107f8578063b88d4fde1461082157610267565b80636352211e146106555780636c0360eb1461069257806370a08231146106bd5780638456cb59146106fa5780638bc4be711461071157610267565b806336568abe116101dd5780634f1ef286116101a15780634f1ef286146105545780634f6ccce71461057057806351cff8d9146105ad57806352d1902d146105d657806355f804b3146106015780635c975abb1461062a57610267565b806336568abe146104995780633659cfe6146104c25780633f4ba83a146104eb57806342842e0e1461050257806342966c681461052b57610267565b8063110284821161022f578063110284821461037757806318160ddd146103a257806323b872dd146103cd578063248a9ca3146103f65780632f2ff15d146104335780632f745c591461045c57610267565b806301ffc9a71461026c57806306fdde03146102a9578063081812fc146102d4578063095ea7b3146103115780630ebd4c7f1461033a575b600080fd5b34801561027857600080fd5b50610293600480360381019061028e9190614d5f565b610a58565b6040516102a09190614da7565b60405180910390f35b3480156102b557600080fd5b506102be610a6a565b6040516102cb9190614e52565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190614eaa565b610afc565b6040516103089190614f18565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190614f5f565b610b42565b005b34801561034657600080fd5b50610361600480360381019061035c9190614eaa565b610c59565b60405161036e919061505d565b60405180910390f35b34801561038357600080fd5b5061038c610d19565b604051610399919061508e565b60405180910390f35b3480156103ae57600080fd5b506103b7610d20565b6040516103c4919061508e565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef91906150a9565b610d2d565b005b34801561040257600080fd5b5061041d60048036038101906104189190615132565b610d8d565b60405161042a919061516e565b60405180910390f35b34801561043f57600080fd5b5061045a60048036038101906104559190615189565b610dae565b005b34801561046857600080fd5b50610483600480360381019061047e9190614f5f565b610dcf565b604051610490919061508e565b60405180910390f35b3480156104a557600080fd5b506104c060048036038101906104bb9190615189565b610e74565b005b3480156104ce57600080fd5b506104e960048036038101906104e491906151c9565b610ef7565b005b3480156104f757600080fd5b5061050061107f565b005b34801561050e57600080fd5b50610529600480360381019061052491906150a9565b6110b4565b005b34801561053757600080fd5b50610552600480360381019061054d9190614eaa565b6110d4565b005b61056e6004803603810190610569919061532b565b611130565b005b34801561057c57600080fd5b5061059760048036038101906105929190614eaa565b61126c565b6040516105a4919061508e565b60405180910390f35b3480156105b957600080fd5b506105d460048036038101906105cf91906153c5565b6112dd565b005b3480156105e257600080fd5b506105eb611427565b6040516105f8919061516e565b60405180910390f35b34801561060d57600080fd5b5061062860048036038101906106239190615493565b6114e0565b005b34801561063657600080fd5b5061063f611502565b60405161064c9190614da7565b60405180910390f35b34801561066157600080fd5b5061067c60048036038101906106779190614eaa565b611519565b6040516106899190614f18565b60405180910390f35b34801561069e57600080fd5b506106a761159f565b6040516106b49190614e52565b60405180910390f35b3480156106c957600080fd5b506106e460048036038101906106df91906151c9565b61162e565b6040516106f1919061508e565b60405180910390f35b34801561070657600080fd5b5061070f6116e5565b005b34801561071d57600080fd5b5061072661171a565b60405161073391906154eb565b60405180910390f35b34801561074857600080fd5b50610763600480360381019061075e9190615189565b611741565b6040516107709190614da7565b60405180910390f35b34801561078557600080fd5b5061078e6117ad565b60405161079b9190614e52565b60405180910390f35b3480156107b057600080fd5b506107b961183f565b6040516107c6919061516e565b60405180910390f35b3480156107db57600080fd5b506107f660048036038101906107f19190615532565b611846565b005b34801561080457600080fd5b5061081f600480360381019061081a9190615572565b61185c565b005b34801561082d57600080fd5b5061084860048036038101906108439190615619565b611ae0565b005b34801561085657600080fd5b50610871600480360381019061086c9190614eaa565b611b42565b60405161087e919061575a565b60405180910390f35b34801561089357600080fd5b506108ae60048036038101906108a9919061577c565b611c50565b005b3480156108bc57600080fd5b506108d760048036038101906108d29190614eaa565b611ea8565b6040516108e49190614e52565b60405180910390f35b3480156108f957600080fd5b50610914600480360381019061090f91906151c9565b611eba565b604051610921919061505d565b60405180910390f35b34801561093657600080fd5b5061093f611f68565b60405161094c919061516e565b60405180910390f35b34801561096157600080fd5b5061097c60048036038101906109779190615189565b611f8c565b005b6109986004803603810190610993919061581c565b611fad565b005b3480156109a657600080fd5b506109af612100565b6040516109bc919061516e565b60405180910390f35b3480156109d157600080fd5b506109da612124565b6040516109e7919061516e565b60405180910390f35b3480156109fc57600080fd5b50610a176004803603810190610a1291906158c0565b612148565b604051610a249190614da7565b60405180910390f35b348015610a3957600080fd5b50610a426121dc565b604051610a4f919061516e565b60405180910390f35b6000610a6382612200565b9050919050565b606060658054610a799061592f565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa59061592f565b8015610af25780601f10610ac757610100808354040283529160200191610af2565b820191906000526020600020905b815481529060010190602001808311610ad557829003601f168201915b5050505050905090565b6000610b0782612279565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b4d82611519565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb4906159d2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bdc6122c4565b73ffffffffffffffffffffffffffffffffffffffff161480610c0b5750610c0a81610c056122c4565b612148565b5b610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4190615a64565b60405180910390fd5b610c5483836122cc565b505050565b606060008211610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9590615ad0565b60405180910390fd5b6000600167ffffffffffffffff811115610cbb57610cba615200565b5b604051908082528060200260200182016040528015610ce95781602001602082028036833780820191505090505b5090506102595481600081518110610d0457610d03615af0565b5b60200260200101818152505080915050919050565b6102595481565b6000609980549050905090565b610d3e610d386122c4565b82612385565b610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7490615b91565b60405180910390fd5b610d8883838361241a565b505050565b600061012d6000838152602001908152602001600020600101549050919050565b610db782610d8d565b610dc081612713565b610dca8383612727565b505050565b6000610dda8361162e565b8210610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1290615c23565b60405180910390fd5b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610e7c6122c4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee090615cb5565b60405180910390fd5b610ef38282612809565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90615d47565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610fc46128ec565b73ffffffffffffffffffffffffffffffffffffffff161461101a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101190615dd9565b60405180910390fd5b61102381612943565b61107c81600067ffffffffffffffff81111561104257611041615200565b5b6040519080825280601f01601f1916602001820160405280156110745781602001600182028036833780820191505090505b506000612971565b50565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6110a981612713565b6110b1612adf565b50565b6110cf83838360405180602001604052806000815250611ae0565b505050565b6110e56110df6122c4565b82612385565b611124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111b90615b91565b60405180910390fd5b61112d81612b42565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b590615d47565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166111fd6128ec565b73ffffffffffffffffffffffffffffffffffffffff1614611253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124a90615dd9565b60405180910390fd5b61125c82612943565b61126882826001612971565b5050565b6000611276610d20565b82106112b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ae90615e6b565b60405180910390fd5b609982815481106112cb576112ca615af0565b5b90600052602060002001549050919050565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec61130781612713565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136d90615ed7565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff164760405161139c90615f28565b60006040518083038185875af1925050503d80600081146113d9576040519150601f19603f3d011682016040523d82523d6000602084013e6113de565b606091505b5050905080611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990615f89565b60405180910390fd5b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae9061601b565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6000801b6114ed81612713565b8161025a90816114fd91906161e7565b505050565b600060fb60009054906101000a900460ff16905090565b60008061152583612b4e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d90616305565b60405180910390fd5b80915050919050565b61025a80546115ad9061592f565b80601f01602080910402602001604051908101604052809291908181526020018280546115d99061592f565b80156116265780601f106115fb57610100808354040283529160200191611626565b820191906000526020600020905b81548152906001019060200180831161160957829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169590616397565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61170f81612713565b611717612b8b565b50565b61025860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061012d600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060606680546117bc9061592f565b80601f01602080910402602001604051908101604052809291908181526020018280546117e89061592f565b80156118355780601f1061180a57610100808354040283529160200191611835565b820191906000526020600020905b81548152906001019060200180831161181857829003601f168201915b5050505050905090565b6000801b81565b6118586118516122c4565b8383612bee565b5050565b60008060019054906101000a900460ff1615905080801561188d5750600160008054906101000a900460ff1660ff16105b806118ba575061189c30612d5a565b1580156118b95750600160008054906101000a900460ff1660ff16145b5b6118f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f090616429565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611936576001600060016101000a81548160ff0219169083151502179055505b6119408484612d7d565b611948612dda565b611950612e2b565b611958612e7c565b611960612ed5565b611968612f26565b611970612f77565b61197d6000801b33612727565b6119a77f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33612727565b6119d17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633612727565b6119fb7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333612727565b611a257f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec33612727565b3361025860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060fa610259819055508161025a9081611a8091906161e7565b508015611ada5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611ad19190616491565b60405180910390a15b50505050565b611af1611aeb6122c4565b83612385565b611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790615b91565b60405180910390fd5b611b3c84848484612fc8565b50505050565b606060008211611b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7e90615ad0565b60405180910390fd5b6000600167ffffffffffffffff811115611ba457611ba3615200565b5b604051908082528060200260200182016040528015611bd25781602001602082028036833780820191505090505b50905061025860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611c0d57611c0c615af0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080915050919050565b6000801b611c5d81612713565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ccc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc3906164f8565b60405180910390fd5b60008211611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0690616564565b60405180910390fd5b8261025860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610259819055506000600167ffffffffffffffff811115611d7657611d75615200565b5b604051908082528060200260200182016040528015611da45781602001602082028036833780820191505090505b5090508381600081518110611dbc57611dbb615af0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff811115611e1357611e12615200565b5b604051908082528060200260200182016040528015611e415781602001602082028036833780820191505090505b5090508381600081518110611e5957611e58615af0565b5b6020026020010181815250507f99aba1d63749cfd5ad1afda7c4663840924d54eb5f005bbbeadedc6ec13674b260008383604051611e999392919061667d565b60405180910390a15050505050565b6060611eb382613024565b9050919050565b60606000611ec78361162e565b905060008167ffffffffffffffff811115611ee557611ee4615200565b5b604051908082528060200260200182016040528015611f135781602001602082028036833780820191505090505b50905060005b82811015611f5d57611f2b8582610dcf565b828281518110611f3e57611f3d615af0565b5b6020026020010181815250508080611f55906166f1565b915050611f19565b508092505050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611f9582610d8d565b611f9e81612713565b611fa88383612809565b505050565b6120637f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661205e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506120503033348b8b60405160200161203595949392919061683b565b60405160208183030381529060405280519060200120613136565b61316690919063ffffffff16565b611741565b6120a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612099906168e2565b60405180910390fd5b843410156120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dc9061694e565b60405180910390fd5b6120ef338561318d565b6120f984846131ab565b5050505050565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b600061220b82613218565b8061227257506101f56000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b61228281613292565b6122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b890616305565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661233f83611519565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061239183611519565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806123d357506123d28185612148565b5b8061241157508373ffffffffffffffffffffffffffffffffffffffff166123f984610afc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661243a82611519565b73ffffffffffffffffffffffffffffffffffffffff1614612490576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612487906169e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036124ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f690616a72565b60405180910390fd5b61250c83838360016132d3565b8273ffffffffffffffffffffffffffffffffffffffff1661252c82611519565b73ffffffffffffffffffffffffffffffffffffffff1614612582576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612579906169e0565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461270e83838360016132ed565b505050565b6127248161271f6122c4565b6132f3565b50565b6127318282611741565b61280557600161012d600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506127aa6122c4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6128138282611741565b156128e857600061012d600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061288d6122c4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061291a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613378565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361296d81612713565b5050565b61299d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613382565b60000160009054906101000a900460ff16156129c1576129bc8361338c565b612ada565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612a2957506040513d601f19601f82011682018060405250810190612a269190616aa7565b60015b612a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5f90616b46565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114612acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac490616bd8565b60405180910390fd5b50612ad9838383613445565b5b505050565b612ae7613471565b600060fb60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b2b6122c4565b604051612b389190614f18565b60405180910390a1565b612b4b816134ba565b50565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b612b9361350d565b600160fb60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bd76122c4565b604051612be49190614f18565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5390616c44565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612d4d9190614da7565b60405180910390a3505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc390616cd6565b60405180910390fd5b612dd68282613557565b5050565b600060019054906101000a900460ff16612e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2090616cd6565b60405180910390fd5b565b600060019054906101000a900460ff16612e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7190616cd6565b60405180910390fd5b565b600060019054906101000a900460ff16612ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec290616cd6565b60405180910390fd5b612ed36135ca565b565b600060019054906101000a900460ff16612f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1b90616cd6565b60405180910390fd5b565b600060019054906101000a900460ff16612f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6c90616cd6565b60405180910390fd5b565b600060019054906101000a900460ff16612fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fbd90616cd6565b60405180910390fd5b565b612fd384848461241a565b612fdf84848484613636565b61301e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301590616d68565b60405180910390fd5b50505050565b606061302f82612279565b600060c96000848152602001908152602001600020805461304f9061592f565b80601f016020809104026020016040519081016040528092919081815260200182805461307b9061592f565b80156130c85780601f1061309d576101008083540402835291602001916130c8565b820191906000526020600020905b8154815290600101906020018083116130ab57829003601f168201915b5050505050905060006130d96137bd565b905060008151036130ee578192505050613131565b60008251111561312357808260405160200161310b929190616d88565b60405160208183030381529060405292505050613131565b61312c84613850565b925050505b919050565b6000816040516020016131499190616e19565b604051602081830303815290604052805190602001209050919050565b600080600061317585856138b8565b9150915061318281613909565b819250505092915050565b6131a7828260405180602001604052806000815250613a6f565b5050565b6131b482613292565b6131f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131ea90616eb1565b60405180910390fd5b8060c96000848152602001908152602001600020908161321391906161e7565b505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061328b575061328a82613aca565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166132b483612b4e565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6132db61350d565b6132e784848484613b44565b50505050565b50505050565b6132fd8282611741565b6133745761330a81613ca2565b6133188360001c6020613ccf565b604051602001613329929190616f69565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336b9190614e52565b60405180910390fd5b5050565b6000819050919050565b6000819050919050565b61339581612d5a565b6133d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133cb90617015565b60405180910390fd5b806134017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613378565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61344e83613f0b565b60008251118061345b5750805b1561346c5761346a8383613f5a565b505b505050565b613479611502565b6134b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134af90617081565b60405180910390fd5b565b6134c38161403e565b600060c9600083815260200190815260200160002080546134e39061592f565b90501461350a5760c9600082815260200190815260200160002060006135099190614c96565b5b50565b613515611502565b15613555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354c906170ed565b60405180910390fd5b565b600060019054906101000a900460ff166135a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359d90616cd6565b60405180910390fd5b81606590816135b591906161e7565b5080606690816135c591906161e7565b505050565b600060019054906101000a900460ff16613619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161361090616cd6565b60405180910390fd5b600060fb60006101000a81548160ff021916908315150217905550565b60006136578473ffffffffffffffffffffffffffffffffffffffff16612d5a565b156137b0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026136806122c4565b8786866040518563ffffffff1660e01b81526004016136a29493929190617162565b6020604051808303816000875af19250505080156136de57506040513d601f19601f820116820180604052508101906136db91906171c3565b60015b613760573d806000811461370e576040519150601f19603f3d011682016040523d82523d6000602084013e613713565b606091505b506000815103613758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374f90616d68565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506137b5565b600190505b949350505050565b606061025a80546137cd9061592f565b80601f01602080910402602001604051908101604052809291908181526020018280546137f99061592f565b80156138465780601f1061381b57610100808354040283529160200191613846565b820191906000526020600020905b81548152906001019060200180831161382957829003601f168201915b5050505050905090565b606061385b82612279565b60006138656137bd565b9050600081511161388557604051806020016040528060008152506138b0565b8061388f8461418c565b6040516020016138a0929190616d88565b6040516020818303038152906040525b915050919050565b60008060418351036138f95760008060006020860151925060408601519150606086015160001a90506138ed8782858561425a565b94509450505050613902565b60006002915091505b9250929050565b6000600481111561391d5761391c6171f0565b5b8160048111156139305761392f6171f0565b5b0315613a6c576001600481111561394a576139496171f0565b5b81600481111561395d5761395c6171f0565b5b0361399d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139949061726b565b60405180910390fd5b600260048111156139b1576139b06171f0565b5b8160048111156139c4576139c36171f0565b5b03613a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139fb906172d7565b60405180910390fd5b60036004811115613a1857613a176171f0565b5b816004811115613a2b57613a2a6171f0565b5b03613a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a6290617369565b60405180910390fd5b5b50565b613a79838361433c565b613a866000848484613636565b613ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613abc90616d68565b60405180910390fd5b505050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480613b3d5750613b3c82614559565b5b9050919050565b613b508484848461463b565b6001811115613b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b8b906173fb565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603613bdb57613bd681614761565b613c1a565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613c1957613c1885826147aa565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603613c5c57613c5781614917565b613c9b565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613c9a57613c9984826149e8565b5b5b5050505050565b6060613cc88273ffffffffffffffffffffffffffffffffffffffff16601460ff16613ccf565b9050919050565b606060006002836002613ce2919061741b565b613cec9190617475565b67ffffffffffffffff811115613d0557613d04615200565b5b6040519080825280601f01601f191660200182016040528015613d375781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613d6f57613d6e615af0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613dd357613dd2615af0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613e13919061741b565b613e1d9190617475565b90505b6001811115613ebd577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613e5f57613e5e615af0565b5b1a60f81b828281518110613e7657613e75615af0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613eb6906174a9565b9050613e20565b5060008414613f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ef89061751e565b60405180910390fd5b8091505092915050565b613f148161338c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060613f6583612d5a565b613fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f9b906175b0565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051613fcc9190617601565b600060405180830381855af49150503d8060008114614007576040519150601f19603f3d011682016040523d82523d6000602084013e61400c565b606091505b509150915061403482826040518060600160405280602781526020016177d760279139614a67565b9250505092915050565b600061404982611519565b90506140598160008460016132d3565b61406282611519565b90506069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46141888160008460016132ed565b5050565b60606000600161419b84614a89565b01905060008167ffffffffffffffff8111156141ba576141b9615200565b5b6040519080825280601f01601f1916602001820160405280156141ec5781602001600182028036833780820191505090505b509050600082602001820190505b60011561424f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161424357614242617618565b5b049450600085036141fa575b819350505050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115614295576000600391509150614333565b6000600187878787604051600081526020016040526040516142ba9493929190617656565b6020604051602081039080840390855afa1580156142dc573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361432a57600060019250925050614333565b80600092509250505b94509492505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036143ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143a2906176e7565b60405180910390fd5b6143b481613292565b156143f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143eb90617753565b60405180910390fd5b6144026000838360016132d3565b61440b81613292565b1561444b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161444290617753565b60405180910390fd5b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46145556000838360016132ed565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061462457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614634575061463382614bdc565b5b9050919050565b600181111561475b57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146146cf5780606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546146c79190617773565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461475a5780606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546147529190617475565b925050819055505b5b50505050565b609980549050609a600083815260200190815260200160002081905550609981908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016147b78461162e565b6147c19190617773565b90506000609860008481526020019081526020016000205490508181146148a6576000609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080609760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816098600083815260200190815260200160002081905550505b6098600084815260200190815260200160002060009055609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160998054905061492b9190617773565b90506000609a600084815260200190815260200160002054905060006099838154811061495b5761495a615af0565b5b90600052602060002001549050806099838154811061497d5761497c615af0565b5b906000526020600020018190555081609a600083815260200190815260200160002081905550609a60008581526020019081526020016000206000905560998054806149cc576149cb6177a7565b5b6001900381819060005260206000200160009055905550505050565b60006149f38361162e565b905081609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806098600084815260200190815260200160002081905550505050565b60608315614a7757829050614a82565b614a818383614c46565b5b9392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614ae7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381614add57614adc617618565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310614b24576d04ee2d6d415b85acef81000000008381614b1a57614b19617618565b5b0492506020810190505b662386f26fc100008310614b5357662386f26fc100008381614b4957614b48617618565b5b0492506010810190505b6305f5e1008310614b7c576305f5e1008381614b7257614b71617618565b5b0492506008810190505b6127108310614ba1576127108381614b9757614b96617618565b5b0492506004810190505b60648310614bc45760648381614bba57614bb9617618565b5b0492506002810190505b600a8310614bd3576001810190505b80915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600082511115614c595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c8d9190614e52565b60405180910390fd5b508054614ca29061592f565b6000825580601f10614cb45750614cd3565b601f016020900490600052602060002090810190614cd29190614cd6565b5b50565b5b80821115614cef576000816000905550600101614cd7565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614d3c81614d07565b8114614d4757600080fd5b50565b600081359050614d5981614d33565b92915050565b600060208284031215614d7557614d74614cfd565b5b6000614d8384828501614d4a565b91505092915050565b60008115159050919050565b614da181614d8c565b82525050565b6000602082019050614dbc6000830184614d98565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614dfc578082015181840152602081019050614de1565b60008484015250505050565b6000601f19601f8301169050919050565b6000614e2482614dc2565b614e2e8185614dcd565b9350614e3e818560208601614dde565b614e4781614e08565b840191505092915050565b60006020820190508181036000830152614e6c8184614e19565b905092915050565b6000819050919050565b614e8781614e74565b8114614e9257600080fd5b50565b600081359050614ea481614e7e565b92915050565b600060208284031215614ec057614ebf614cfd565b5b6000614ece84828501614e95565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614f0282614ed7565b9050919050565b614f1281614ef7565b82525050565b6000602082019050614f2d6000830184614f09565b92915050565b614f3c81614ef7565b8114614f4757600080fd5b50565b600081359050614f5981614f33565b92915050565b60008060408385031215614f7657614f75614cfd565b5b6000614f8485828601614f4a565b9250506020614f9585828601614e95565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614fd481614e74565b82525050565b6000614fe68383614fcb565b60208301905092915050565b6000602082019050919050565b600061500a82614f9f565b6150148185614faa565b935061501f83614fbb565b8060005b838110156150505781516150378882614fda565b975061504283614ff2565b925050600181019050615023565b5085935050505092915050565b600060208201905081810360008301526150778184614fff565b905092915050565b61508881614e74565b82525050565b60006020820190506150a3600083018461507f565b92915050565b6000806000606084860312156150c2576150c1614cfd565b5b60006150d086828701614f4a565b93505060206150e186828701614f4a565b92505060406150f286828701614e95565b9150509250925092565b6000819050919050565b61510f816150fc565b811461511a57600080fd5b50565b60008135905061512c81615106565b92915050565b60006020828403121561514857615147614cfd565b5b60006151568482850161511d565b91505092915050565b615168816150fc565b82525050565b6000602082019050615183600083018461515f565b92915050565b600080604083850312156151a05761519f614cfd565b5b60006151ae8582860161511d565b92505060206151bf85828601614f4a565b9150509250929050565b6000602082840312156151df576151de614cfd565b5b60006151ed84828501614f4a565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61523882614e08565b810181811067ffffffffffffffff8211171561525757615256615200565b5b80604052505050565b600061526a614cf3565b9050615276828261522f565b919050565b600067ffffffffffffffff82111561529657615295615200565b5b61529f82614e08565b9050602081019050919050565b82818337600083830152505050565b60006152ce6152c98461527b565b615260565b9050828152602081018484840111156152ea576152e96151fb565b5b6152f58482856152ac565b509392505050565b600082601f830112615312576153116151f6565b5b81356153228482602086016152bb565b91505092915050565b6000806040838503121561534257615341614cfd565b5b600061535085828601614f4a565b925050602083013567ffffffffffffffff81111561537157615370614d02565b5b61537d858286016152fd565b9150509250929050565b600061539282614ed7565b9050919050565b6153a281615387565b81146153ad57600080fd5b50565b6000813590506153bf81615399565b92915050565b6000602082840312156153db576153da614cfd565b5b60006153e9848285016153b0565b91505092915050565b600067ffffffffffffffff82111561540d5761540c615200565b5b61541682614e08565b9050602081019050919050565b6000615436615431846153f2565b615260565b905082815260208101848484011115615452576154516151fb565b5b61545d8482856152ac565b509392505050565b600082601f83011261547a576154796151f6565b5b813561548a848260208601615423565b91505092915050565b6000602082840312156154a9576154a8614cfd565b5b600082013567ffffffffffffffff8111156154c7576154c6614d02565b5b6154d384828501615465565b91505092915050565b6154e581615387565b82525050565b600060208201905061550060008301846154dc565b92915050565b61550f81614d8c565b811461551a57600080fd5b50565b60008135905061552c81615506565b92915050565b6000806040838503121561554957615548614cfd565b5b600061555785828601614f4a565b92505060206155688582860161551d565b9150509250929050565b60008060006060848603121561558b5761558a614cfd565b5b600084013567ffffffffffffffff8111156155a9576155a8614d02565b5b6155b586828701615465565b935050602084013567ffffffffffffffff8111156155d6576155d5614d02565b5b6155e286828701615465565b925050604084013567ffffffffffffffff81111561560357615602614d02565b5b61560f86828701615465565b9150509250925092565b6000806000806080858703121561563357615632614cfd565b5b600061564187828801614f4a565b945050602061565287828801614f4a565b935050604061566387828801614e95565b925050606085013567ffffffffffffffff81111561568457615683614d02565b5b615690878288016152fd565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6156d181615387565b82525050565b60006156e383836156c8565b60208301905092915050565b6000602082019050919050565b60006157078261569c565b61571181856156a7565b935061571c836156b8565b8060005b8381101561574d57815161573488826156d7565b975061573f836156ef565b925050600181019050615720565b5085935050505092915050565b6000602082019050818103600083015261577481846156fc565b905092915050565b6000806040838503121561579357615792614cfd565b5b60006157a1858286016153b0565b92505060206157b285828601614e95565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126157dc576157db6151f6565b5b8235905067ffffffffffffffff8111156157f9576157f86157bc565b5b602083019150836001820283011115615815576158146157c1565b5b9250929050565b60008060008060006080868803121561583857615837614cfd565b5b600061584688828901614e95565b955050602061585788828901614e95565b945050604086013567ffffffffffffffff81111561587857615877614d02565b5b61588488828901615465565b935050606086013567ffffffffffffffff8111156158a5576158a4614d02565b5b6158b1888289016157c6565b92509250509295509295909350565b600080604083850312156158d7576158d6614cfd565b5b60006158e585828601614f4a565b92505060206158f685828601614f4a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061594757607f821691505b60208210810361595a57615959615900565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006159bc602183614dcd565b91506159c782615960565b604082019050919050565b600060208201905081810360008301526159eb816159af565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000615a4e603d83614dcd565b9150615a59826159f2565b604082019050919050565b60006020820190508181036000830152615a7d81615a41565b9050919050565b7f6964203000000000000000000000000000000000000000000000000000000000600082015250565b6000615aba600483614dcd565b9150615ac582615a84565b602082019050919050565b60006020820190508181036000830152615ae981615aad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000615b7b602d83614dcd565b9150615b8682615b1f565b604082019050919050565b60006020820190508181036000830152615baa81615b6e565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000615c0d602b83614dcd565b9150615c1882615bb1565b604082019050919050565b60006020820190508181036000830152615c3c81615c00565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000615c9f602f83614dcd565b9150615caa82615c43565b604082019050919050565b60006020820190508181036000830152615cce81615c92565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000615d31602c83614dcd565b9150615d3c82615cd5565b604082019050919050565b60006020820190508181036000830152615d6081615d24565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000615dc3602c83614dcd565b9150615dce82615d67565b604082019050919050565b60006020820190508181036000830152615df281615db6565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000615e55602c83614dcd565b9150615e6082615df9565b604082019050919050565b60006020820190508181036000830152615e8481615e48565b9050919050565b7f61646472657373207a65726f0000000000000000000000000000000000000000600082015250565b6000615ec1600c83614dcd565b9150615ecc82615e8b565b602082019050919050565b60006020820190508181036000830152615ef081615eb4565b9050919050565b600081905092915050565b50565b6000615f12600083615ef7565b9150615f1d82615f02565b600082019050919050565b6000615f3382615f05565b9150819050919050565b7f4661696c656420746f2073656e6420456e746572000000000000000000000000600082015250565b6000615f73601483614dcd565b9150615f7e82615f3d565b602082019050919050565b60006020820190508181036000830152615fa281615f66565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000616005603883614dcd565b915061601082615fa9565b604082019050919050565b6000602082019050818103600083015261603481615ff8565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261609d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82616060565b6160a78683616060565b95508019841693508086168417925050509392505050565b6000819050919050565b60006160e46160df6160da84614e74565b6160bf565b614e74565b9050919050565b6000819050919050565b6160fe836160c9565b61611261610a826160eb565b84845461606d565b825550505050565b600090565b61612761611a565b6161328184846160f5565b505050565b5b818110156161565761614b60008261611f565b600181019050616138565b5050565b601f82111561619b5761616c8161603b565b61617584616050565b81016020851015616184578190505b61619861619085616050565b830182616137565b50505b505050565b600082821c905092915050565b60006161be600019846008026161a0565b1980831691505092915050565b60006161d783836161ad565b9150826002028217905092915050565b6161f082614dc2565b67ffffffffffffffff81111561620957616208615200565b5b616213825461592f565b61621e82828561615a565b600060209050601f831160018114616251576000841561623f578287015190505b61624985826161cb565b8655506162b1565b601f19841661625f8661603b565b60005b8281101561628757848901518255600182019150602085019450602081019050616262565b868310156162a457848901516162a0601f8916826161ad565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006162ef601883614dcd565b91506162fa826162b9565b602082019050919050565b6000602082019050818103600083015261631e816162e2565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000616381602983614dcd565b915061638c82616325565b604082019050919050565b600060208201905081810360008301526163b081616374565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000616413602e83614dcd565b915061641e826163b7565b604082019050919050565b6000602082019050818103600083015261644281616406565b9050919050565b6000819050919050565b600060ff82169050919050565b600061647b61647661647184616449565b6160bf565b616453565b9050919050565b61648b81616460565b82525050565b60006020820190506164a66000830184616482565b92915050565b7f526563697069656e742062652070726573656e74000000000000000000000000600082015250565b60006164e2601483614dcd565b91506164ed826164ac565b602082019050919050565b60006020820190508181036000830152616511816164d5565b9050919050565b7f4665652076616c756520626520706f7369746976650000000000000000000000600082015250565b600061654e601583614dcd565b915061655982616518565b602082019050919050565b6000602082019050818103600083015261657d81616541565b9050919050565b6000819050919050565b60006165a96165a461659f84616584565b6160bf565b614e74565b9050919050565b6165b98161658e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6165f481614ef7565b82525050565b600061660683836165eb565b60208301905092915050565b6000602082019050919050565b600061662a826165bf565b61663481856165ca565b935061663f836165db565b8060005b8381101561667057815161665788826165fa565b975061666283616612565b925050600181019050616643565b5085935050505092915050565b600060608201905061669260008301866165b0565b81810360208301526166a4818561661f565b905081810360408301526166b88184614fff565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006166fc82614e74565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361672e5761672d6166c2565b5b600182019050919050565b600061675461674f61674a84614ed7565b6160bf565b614ed7565b9050919050565b600061676682616739565b9050919050565b60006167788261675b565b9050919050565b60008160601b9050919050565b60006167978261677f565b9050919050565b60006167a98261678c565b9050919050565b6167c16167bc8261676d565b61679e565b82525050565b6167d86167d382614ef7565b61679e565b82525050565b6000819050919050565b6167f96167f482614e74565b6167de565b82525050565b600081905092915050565b600061681582614dc2565b61681f81856167ff565b935061682f818560208601614dde565b80840191505092915050565b600061684782886167b0565b60148201915061685782876167c7565b60148201915061686782866167e8565b60208201915061687782856167e8565b602082019150616887828461680a565b91508190509695505050505050565b7f7369676e20657272000000000000000000000000000000000000000000000000600082015250565b60006168cc600883614dcd565b91506168d782616896565b602082019050919050565b600060208201905081810360008301526168fb816168bf565b9050919050565b7f45746865722076616c75652073656e74206973206e6f7420636f727265637400600082015250565b6000616938601f83614dcd565b915061694382616902565b602082019050919050565b600060208201905081810360008301526169678161692b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006169ca602583614dcd565b91506169d58261696e565b604082019050919050565b600060208201905081810360008301526169f9816169bd565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000616a5c602483614dcd565b9150616a6782616a00565b604082019050919050565b60006020820190508181036000830152616a8b81616a4f565b9050919050565b600081519050616aa181615106565b92915050565b600060208284031215616abd57616abc614cfd565b5b6000616acb84828501616a92565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000616b30602e83614dcd565b9150616b3b82616ad4565b604082019050919050565b60006020820190508181036000830152616b5f81616b23565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000616bc2602983614dcd565b9150616bcd82616b66565b604082019050919050565b60006020820190508181036000830152616bf181616bb5565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000616c2e601983614dcd565b9150616c3982616bf8565b602082019050919050565b60006020820190508181036000830152616c5d81616c21565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000616cc0602b83614dcd565b9150616ccb82616c64565b604082019050919050565b60006020820190508181036000830152616cef81616cb3565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000616d52603283614dcd565b9150616d5d82616cf6565b604082019050919050565b60006020820190508181036000830152616d8181616d45565b9050919050565b6000616d94828561680a565b9150616da0828461680a565b91508190509392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000616de2601c836167ff565b9150616ded82616dac565b601c82019050919050565b6000819050919050565b616e13616e0e826150fc565b616df8565b82525050565b6000616e2482616dd5565b9150616e308284616e02565b60208201915081905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000616e9b602e83614dcd565b9150616ea682616e3f565b604082019050919050565b60006020820190508181036000830152616eca81616e8e565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000616f076017836167ff565b9150616f1282616ed1565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000616f536011836167ff565b9150616f5e82616f1d565b601182019050919050565b6000616f7482616efa565b9150616f80828561680a565b9150616f8b82616f46565b9150616f97828461680a565b91508190509392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000616fff602d83614dcd565b915061700a82616fa3565b604082019050919050565b6000602082019050818103600083015261702e81616ff2565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061706b601483614dcd565b915061707682617035565b602082019050919050565b6000602082019050818103600083015261709a8161705e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006170d7601083614dcd565b91506170e2826170a1565b602082019050919050565b60006020820190508181036000830152617106816170ca565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006171348261710d565b61713e8185617118565b935061714e818560208601614dde565b61715781614e08565b840191505092915050565b60006080820190506171776000830187614f09565b6171846020830186614f09565b617191604083018561507f565b81810360608301526171a38184617129565b905095945050505050565b6000815190506171bd81614d33565b92915050565b6000602082840312156171d9576171d8614cfd565b5b60006171e7848285016171ae565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000617255601883614dcd565b91506172608261721f565b602082019050919050565b6000602082019050818103600083015261728481617248565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006172c1601f83614dcd565b91506172cc8261728b565b602082019050919050565b600060208201905081810360008301526172f0816172b4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000617353602283614dcd565b915061735e826172f7565b604082019050919050565b6000602082019050818103600083015261738281617346565b9050919050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b60006173e5603583614dcd565b91506173f082617389565b604082019050919050565b60006020820190508181036000830152617414816173d8565b9050919050565b600061742682614e74565b915061743183614e74565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561746a576174696166c2565b5b828202905092915050565b600061748082614e74565b915061748b83614e74565b92508282019050808211156174a3576174a26166c2565b5b92915050565b60006174b482614e74565b9150600082036174c7576174c66166c2565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000617508602083614dcd565b9150617513826174d2565b602082019050919050565b60006020820190508181036000830152617537816174fb565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061759a602683614dcd565b91506175a58261753e565b604082019050919050565b600060208201905081810360008301526175c98161758d565b9050919050565b60006175db8261710d565b6175e58185615ef7565b93506175f5818560208601614dde565b80840191505092915050565b600061760d82846175d0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b61765081616453565b82525050565b600060808201905061766b600083018761515f565b6176786020830186617647565b617685604083018561515f565b617692606083018461515f565b95945050505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006176d1602083614dcd565b91506176dc8261769b565b602082019050919050565b60006020820190508181036000830152617700816176c4565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061773d601c83614dcd565b915061774882617707565b602082019050919050565b6000602082019050818103600083015261776c81617730565b9050919050565b600061777e82614e74565b915061778983614e74565b92508282039050818111156177a1576177a06166c2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bdbb5f8ef9c6afb085b2ed4a107614d81cf35a8afb08f8929f8e40e7797beff564736f6c63430008100033",
}

// LandTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use LandTokenMetaData.ABI instead.
var LandTokenABI = LandTokenMetaData.ABI

// LandTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LandTokenMetaData.Bin instead.
var LandTokenBin = LandTokenMetaData.Bin

// DeployLandToken deploys a new Ethereum contract, binding an instance of LandToken to it.
func DeployLandToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LandToken, error) {
	parsed, err := LandTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LandTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LandToken{LandTokenCaller: LandTokenCaller{contract: contract}, LandTokenTransactor: LandTokenTransactor{contract: contract}, LandTokenFilterer: LandTokenFilterer{contract: contract}}, nil
}

// LandToken is an auto generated Go binding around an Ethereum contract.
type LandToken struct {
	LandTokenCaller     // Read-only binding to the contract
	LandTokenTransactor // Write-only binding to the contract
	LandTokenFilterer   // Log filterer for contract events
}

// LandTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type LandTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LandTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LandTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LandTokenSession struct {
	Contract     *LandToken        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LandTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LandTokenCallerSession struct {
	Contract *LandTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// LandTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LandTokenTransactorSession struct {
	Contract     *LandTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// LandTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type LandTokenRaw struct {
	Contract *LandToken // Generic contract binding to access the raw methods on
}

// LandTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LandTokenCallerRaw struct {
	Contract *LandTokenCaller // Generic read-only contract binding to access the raw methods on
}

// LandTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LandTokenTransactorRaw struct {
	Contract *LandTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLandToken creates a new instance of LandToken, bound to a specific deployed contract.
func NewLandToken(address common.Address, backend bind.ContractBackend) (*LandToken, error) {
	contract, err := bindLandToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LandToken{LandTokenCaller: LandTokenCaller{contract: contract}, LandTokenTransactor: LandTokenTransactor{contract: contract}, LandTokenFilterer: LandTokenFilterer{contract: contract}}, nil
}

// NewLandTokenCaller creates a new read-only instance of LandToken, bound to a specific deployed contract.
func NewLandTokenCaller(address common.Address, caller bind.ContractCaller) (*LandTokenCaller, error) {
	contract, err := bindLandToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LandTokenCaller{contract: contract}, nil
}

// NewLandTokenTransactor creates a new write-only instance of LandToken, bound to a specific deployed contract.
func NewLandTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*LandTokenTransactor, error) {
	contract, err := bindLandToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LandTokenTransactor{contract: contract}, nil
}

// NewLandTokenFilterer creates a new log filterer instance of LandToken, bound to a specific deployed contract.
func NewLandTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*LandTokenFilterer, error) {
	contract, err := bindLandToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LandTokenFilterer{contract: contract}, nil
}

// bindLandToken binds a generic wrapper to an already deployed contract.
func bindLandToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LandTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LandToken *LandTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LandToken.Contract.LandTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LandToken *LandTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LandToken.Contract.LandTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LandToken *LandTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LandToken.Contract.LandTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LandToken *LandTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LandToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LandToken *LandTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LandToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LandToken *LandTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LandToken.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LandToken *LandTokenSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LandToken.Contract.DEFAULTADMINROLE(&_LandToken.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LandToken.Contract.DEFAULTADMINROLE(&_LandToken.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenSession) MINTERROLE() ([32]byte, error) {
	return _LandToken.Contract.MINTERROLE(&_LandToken.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) MINTERROLE() ([32]byte, error) {
	return _LandToken.Contract.MINTERROLE(&_LandToken.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenSession) PAUSERROLE() ([32]byte, error) {
	return _LandToken.Contract.PAUSERROLE(&_LandToken.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) PAUSERROLE() ([32]byte, error) {
	return _LandToken.Contract.PAUSERROLE(&_LandToken.CallOpts)
}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_LandToken *LandTokenCaller) RPercebtage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "RPercebtage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_LandToken *LandTokenSession) RPercebtage() (*big.Int, error) {
	return _LandToken.Contract.RPercebtage(&_LandToken.CallOpts)
}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_LandToken *LandTokenCallerSession) RPercebtage() (*big.Int, error) {
	return _LandToken.Contract.RPercebtage(&_LandToken.CallOpts)
}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_LandToken *LandTokenCaller) RRecipientAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "RRecipientAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_LandToken *LandTokenSession) RRecipientAddress() (common.Address, error) {
	return _LandToken.Contract.RRecipientAddress(&_LandToken.CallOpts)
}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_LandToken *LandTokenCallerSession) RRecipientAddress() (common.Address, error) {
	return _LandToken.Contract.RRecipientAddress(&_LandToken.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCaller) UPGRADERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "UPGRADER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenSession) UPGRADERROLE() ([32]byte, error) {
	return _LandToken.Contract.UPGRADERROLE(&_LandToken.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) UPGRADERROLE() ([32]byte, error) {
	return _LandToken.Contract.UPGRADERROLE(&_LandToken.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCaller) WITHDRAWROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "WITHDRAW_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_LandToken *LandTokenSession) WITHDRAWROLE() ([32]byte, error) {
	return _LandToken.Contract.WITHDRAWROLE(&_LandToken.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) WITHDRAWROLE() ([32]byte, error) {
	return _LandToken.Contract.WITHDRAWROLE(&_LandToken.CallOpts)
}

// BalanceByOwner is a free data retrieval call binding the contract method 0xd1abfc9b.
//
// Solidity: function balanceByOwner(address owner) view returns(uint256[])
func (_LandToken *LandTokenCaller) BalanceByOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "balanceByOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceByOwner is a free data retrieval call binding the contract method 0xd1abfc9b.
//
// Solidity: function balanceByOwner(address owner) view returns(uint256[])
func (_LandToken *LandTokenSession) BalanceByOwner(owner common.Address) ([]*big.Int, error) {
	return _LandToken.Contract.BalanceByOwner(&_LandToken.CallOpts, owner)
}

// BalanceByOwner is a free data retrieval call binding the contract method 0xd1abfc9b.
//
// Solidity: function balanceByOwner(address owner) view returns(uint256[])
func (_LandToken *LandTokenCallerSession) BalanceByOwner(owner common.Address) ([]*big.Int, error) {
	return _LandToken.Contract.BalanceByOwner(&_LandToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_LandToken *LandTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_LandToken *LandTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _LandToken.Contract.BalanceOf(&_LandToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_LandToken *LandTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _LandToken.Contract.BalanceOf(&_LandToken.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_LandToken *LandTokenCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_LandToken *LandTokenSession) BaseURI() (string, error) {
	return _LandToken.Contract.BaseURI(&_LandToken.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_LandToken *LandTokenCallerSession) BaseURI() (string, error) {
	return _LandToken.Contract.BaseURI(&_LandToken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _LandToken.Contract.GetApproved(&_LandToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _LandToken.Contract.GetApproved(&_LandToken.CallOpts, tokenId)
}

// GetFeeBps is a free data retrieval call binding the contract method 0x0ebd4c7f.
//
// Solidity: function getFeeBps(uint256 id) view returns(uint256[])
func (_LandToken *LandTokenCaller) GetFeeBps(opts *bind.CallOpts, id *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "getFeeBps", id)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetFeeBps is a free data retrieval call binding the contract method 0x0ebd4c7f.
//
// Solidity: function getFeeBps(uint256 id) view returns(uint256[])
func (_LandToken *LandTokenSession) GetFeeBps(id *big.Int) ([]*big.Int, error) {
	return _LandToken.Contract.GetFeeBps(&_LandToken.CallOpts, id)
}

// GetFeeBps is a free data retrieval call binding the contract method 0x0ebd4c7f.
//
// Solidity: function getFeeBps(uint256 id) view returns(uint256[])
func (_LandToken *LandTokenCallerSession) GetFeeBps(id *big.Int) ([]*big.Int, error) {
	return _LandToken.Contract.GetFeeBps(&_LandToken.CallOpts, id)
}

// GetFeeRecipients is a free data retrieval call binding the contract method 0xb9c4d9fb.
//
// Solidity: function getFeeRecipients(uint256 id) view returns(address[])
func (_LandToken *LandTokenCaller) GetFeeRecipients(opts *bind.CallOpts, id *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "getFeeRecipients", id)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetFeeRecipients is a free data retrieval call binding the contract method 0xb9c4d9fb.
//
// Solidity: function getFeeRecipients(uint256 id) view returns(address[])
func (_LandToken *LandTokenSession) GetFeeRecipients(id *big.Int) ([]common.Address, error) {
	return _LandToken.Contract.GetFeeRecipients(&_LandToken.CallOpts, id)
}

// GetFeeRecipients is a free data retrieval call binding the contract method 0xb9c4d9fb.
//
// Solidity: function getFeeRecipients(uint256 id) view returns(address[])
func (_LandToken *LandTokenCallerSession) GetFeeRecipients(id *big.Int) ([]common.Address, error) {
	return _LandToken.Contract.GetFeeRecipients(&_LandToken.CallOpts, id)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LandToken *LandTokenCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LandToken *LandTokenSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LandToken.Contract.GetRoleAdmin(&_LandToken.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LandToken *LandTokenCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LandToken.Contract.GetRoleAdmin(&_LandToken.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LandToken *LandTokenCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LandToken *LandTokenSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LandToken.Contract.HasRole(&_LandToken.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LandToken *LandTokenCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LandToken.Contract.HasRole(&_LandToken.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_LandToken *LandTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_LandToken *LandTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _LandToken.Contract.IsApprovedForAll(&_LandToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_LandToken *LandTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _LandToken.Contract.IsApprovedForAll(&_LandToken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LandToken *LandTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LandToken *LandTokenSession) Name() (string, error) {
	return _LandToken.Contract.Name(&_LandToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LandToken *LandTokenCallerSession) Name() (string, error) {
	return _LandToken.Contract.Name(&_LandToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _LandToken.Contract.OwnerOf(&_LandToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_LandToken *LandTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _LandToken.Contract.OwnerOf(&_LandToken.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LandToken *LandTokenCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LandToken *LandTokenSession) Paused() (bool, error) {
	return _LandToken.Contract.Paused(&_LandToken.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LandToken *LandTokenCallerSession) Paused() (bool, error) {
	return _LandToken.Contract.Paused(&_LandToken.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LandToken *LandTokenCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LandToken *LandTokenSession) ProxiableUUID() ([32]byte, error) {
	return _LandToken.Contract.ProxiableUUID(&_LandToken.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LandToken *LandTokenCallerSession) ProxiableUUID() ([32]byte, error) {
	return _LandToken.Contract.ProxiableUUID(&_LandToken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LandToken *LandTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LandToken *LandTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LandToken.Contract.SupportsInterface(&_LandToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LandToken *LandTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LandToken.Contract.SupportsInterface(&_LandToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LandToken *LandTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LandToken *LandTokenSession) Symbol() (string, error) {
	return _LandToken.Contract.Symbol(&_LandToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LandToken *LandTokenCallerSession) Symbol() (string, error) {
	return _LandToken.Contract.Symbol(&_LandToken.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_LandToken *LandTokenCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_LandToken *LandTokenSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _LandToken.Contract.TokenByIndex(&_LandToken.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_LandToken *LandTokenCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _LandToken.Contract.TokenByIndex(&_LandToken.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_LandToken *LandTokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_LandToken *LandTokenSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _LandToken.Contract.TokenOfOwnerByIndex(&_LandToken.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_LandToken *LandTokenCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _LandToken.Contract.TokenOfOwnerByIndex(&_LandToken.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_LandToken *LandTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_LandToken *LandTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _LandToken.Contract.TokenURI(&_LandToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_LandToken *LandTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _LandToken.Contract.TokenURI(&_LandToken.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LandToken *LandTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LandToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LandToken *LandTokenSession) TotalSupply() (*big.Int, error) {
	return _LandToken.Contract.TotalSupply(&_LandToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LandToken *LandTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _LandToken.Contract.TotalSupply(&_LandToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_LandToken *LandTokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.Approve(&_LandToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.Approve(&_LandToken.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_LandToken *LandTokenTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_LandToken *LandTokenSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.Burn(&_LandToken.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_LandToken *LandTokenTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.Burn(&_LandToken.TransactOpts, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.GrantRole(&_LandToken.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.GrantRole(&_LandToken.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string _name, string _symbol, string _uri) returns()
func (_LandToken *LandTokenTransactor) Initialize(opts *bind.TransactOpts, _name string, _symbol string, _uri string) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "initialize", _name, _symbol, _uri)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string _name, string _symbol, string _uri) returns()
func (_LandToken *LandTokenSession) Initialize(_name string, _symbol string, _uri string) (*types.Transaction, error) {
	return _LandToken.Contract.Initialize(&_LandToken.TransactOpts, _name, _symbol, _uri)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string _name, string _symbol, string _uri) returns()
func (_LandToken *LandTokenTransactorSession) Initialize(_name string, _symbol string, _uri string) (*types.Transaction, error) {
	return _LandToken.Contract.Initialize(&_LandToken.TransactOpts, _name, _symbol, _uri)
}

// Mint is a paid mutator transaction binding the contract method 0xdc214055.
//
// Solidity: function mint(uint256 amount, uint256 tokenId, string uri, bytes sign) payable returns()
func (_LandToken *LandTokenTransactor) Mint(opts *bind.TransactOpts, amount *big.Int, tokenId *big.Int, uri string, sign []byte) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "mint", amount, tokenId, uri, sign)
}

// Mint is a paid mutator transaction binding the contract method 0xdc214055.
//
// Solidity: function mint(uint256 amount, uint256 tokenId, string uri, bytes sign) payable returns()
func (_LandToken *LandTokenSession) Mint(amount *big.Int, tokenId *big.Int, uri string, sign []byte) (*types.Transaction, error) {
	return _LandToken.Contract.Mint(&_LandToken.TransactOpts, amount, tokenId, uri, sign)
}

// Mint is a paid mutator transaction binding the contract method 0xdc214055.
//
// Solidity: function mint(uint256 amount, uint256 tokenId, string uri, bytes sign) payable returns()
func (_LandToken *LandTokenTransactorSession) Mint(amount *big.Int, tokenId *big.Int, uri string, sign []byte) (*types.Transaction, error) {
	return _LandToken.Contract.Mint(&_LandToken.TransactOpts, amount, tokenId, uri, sign)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LandToken *LandTokenTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LandToken *LandTokenSession) Pause() (*types.Transaction, error) {
	return _LandToken.Contract.Pause(&_LandToken.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LandToken *LandTokenTransactorSession) Pause() (*types.Transaction, error) {
	return _LandToken.Contract.Pause(&_LandToken.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.RenounceRole(&_LandToken.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.RenounceRole(&_LandToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.RevokeRole(&_LandToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LandToken *LandTokenTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.RevokeRole(&_LandToken.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.SafeTransferFrom(&_LandToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.SafeTransferFrom(&_LandToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_LandToken *LandTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_LandToken *LandTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _LandToken.Contract.SafeTransferFrom0(&_LandToken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_LandToken *LandTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _LandToken.Contract.SafeTransferFrom0(&_LandToken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_LandToken *LandTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_LandToken *LandTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _LandToken.Contract.SetApprovalForAll(&_LandToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_LandToken *LandTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _LandToken.Contract.SetApprovalForAll(&_LandToken.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_LandToken *LandTokenTransactor) SetBaseURI(opts *bind.TransactOpts, uri string) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "setBaseURI", uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_LandToken *LandTokenSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _LandToken.Contract.SetBaseURI(&_LandToken.TransactOpts, uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_LandToken *LandTokenTransactorSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _LandToken.Contract.SetBaseURI(&_LandToken.TransactOpts, uri)
}

// SetFeeRecipient is a paid mutator transaction binding the contract method 0xc602ac14.
//
// Solidity: function setFeeRecipient(address _recipient, uint256 _fee) returns()
func (_LandToken *LandTokenTransactor) SetFeeRecipient(opts *bind.TransactOpts, _recipient common.Address, _fee *big.Int) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "setFeeRecipient", _recipient, _fee)
}

// SetFeeRecipient is a paid mutator transaction binding the contract method 0xc602ac14.
//
// Solidity: function setFeeRecipient(address _recipient, uint256 _fee) returns()
func (_LandToken *LandTokenSession) SetFeeRecipient(_recipient common.Address, _fee *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.SetFeeRecipient(&_LandToken.TransactOpts, _recipient, _fee)
}

// SetFeeRecipient is a paid mutator transaction binding the contract method 0xc602ac14.
//
// Solidity: function setFeeRecipient(address _recipient, uint256 _fee) returns()
func (_LandToken *LandTokenTransactorSession) SetFeeRecipient(_recipient common.Address, _fee *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.SetFeeRecipient(&_LandToken.TransactOpts, _recipient, _fee)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.TransferFrom(&_LandToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_LandToken *LandTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _LandToken.Contract.TransferFrom(&_LandToken.TransactOpts, from, to, tokenId)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LandToken *LandTokenTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LandToken *LandTokenSession) Unpause() (*types.Transaction, error) {
	return _LandToken.Contract.Unpause(&_LandToken.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LandToken *LandTokenTransactorSession) Unpause() (*types.Transaction, error) {
	return _LandToken.Contract.Unpause(&_LandToken.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LandToken *LandTokenTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LandToken *LandTokenSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.UpgradeTo(&_LandToken.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LandToken *LandTokenTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.UpgradeTo(&_LandToken.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LandToken *LandTokenTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LandToken *LandTokenSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LandToken.Contract.UpgradeToAndCall(&_LandToken.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LandToken *LandTokenTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LandToken.Contract.UpgradeToAndCall(&_LandToken.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address to) returns()
func (_LandToken *LandTokenTransactor) Withdraw(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _LandToken.contract.Transact(opts, "withdraw", to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address to) returns()
func (_LandToken *LandTokenSession) Withdraw(to common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.Withdraw(&_LandToken.TransactOpts, to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address to) returns()
func (_LandToken *LandTokenTransactorSession) Withdraw(to common.Address) (*types.Transaction, error) {
	return _LandToken.Contract.Withdraw(&_LandToken.TransactOpts, to)
}

// LandTokenAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the LandToken contract.
type LandTokenAdminChangedIterator struct {
	Event *LandTokenAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenAdminChanged represents a AdminChanged event raised by the LandToken contract.
type LandTokenAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LandToken *LandTokenFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*LandTokenAdminChangedIterator, error) {

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &LandTokenAdminChangedIterator{contract: _LandToken.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LandToken *LandTokenFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *LandTokenAdminChanged) (event.Subscription, error) {

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenAdminChanged)
				if err := _LandToken.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LandToken *LandTokenFilterer) ParseAdminChanged(log types.Log) (*LandTokenAdminChanged, error) {
	event := new(LandTokenAdminChanged)
	if err := _LandToken.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LandToken contract.
type LandTokenApprovalIterator struct {
	Event *LandTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenApproval represents a Approval event raised by the LandToken contract.
type LandTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*LandTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenApprovalIterator{contract: _LandToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LandTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenApproval)
				if err := _LandToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) ParseApproval(log types.Log) (*LandTokenApproval, error) {
	event := new(LandTokenApproval)
	if err := _LandToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the LandToken contract.
type LandTokenApprovalForAllIterator struct {
	Event *LandTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenApprovalForAll represents a ApprovalForAll event raised by the LandToken contract.
type LandTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_LandToken *LandTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*LandTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenApprovalForAllIterator{contract: _LandToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_LandToken *LandTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *LandTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenApprovalForAll)
				if err := _LandToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_LandToken *LandTokenFilterer) ParseApprovalForAll(log types.Log) (*LandTokenApprovalForAll, error) {
	event := new(LandTokenApprovalForAll)
	if err := _LandToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the LandToken contract.
type LandTokenBeaconUpgradedIterator struct {
	Event *LandTokenBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenBeaconUpgraded represents a BeaconUpgraded event raised by the LandToken contract.
type LandTokenBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_LandToken *LandTokenFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*LandTokenBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenBeaconUpgradedIterator{contract: _LandToken.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_LandToken *LandTokenFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *LandTokenBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenBeaconUpgraded)
				if err := _LandToken.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_LandToken *LandTokenFilterer) ParseBeaconUpgraded(log types.Log) (*LandTokenBeaconUpgraded, error) {
	event := new(LandTokenBeaconUpgraded)
	if err := _LandToken.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the LandToken contract.
type LandTokenInitializedIterator struct {
	Event *LandTokenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenInitialized represents a Initialized event raised by the LandToken contract.
type LandTokenInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_LandToken *LandTokenFilterer) FilterInitialized(opts *bind.FilterOpts) (*LandTokenInitializedIterator, error) {

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &LandTokenInitializedIterator{contract: _LandToken.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_LandToken *LandTokenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *LandTokenInitialized) (event.Subscription, error) {

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenInitialized)
				if err := _LandToken.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_LandToken *LandTokenFilterer) ParseInitialized(log types.Log) (*LandTokenInitialized, error) {
	event := new(LandTokenInitialized)
	if err := _LandToken.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LandToken contract.
type LandTokenPausedIterator struct {
	Event *LandTokenPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenPaused represents a Paused event raised by the LandToken contract.
type LandTokenPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LandToken *LandTokenFilterer) FilterPaused(opts *bind.FilterOpts) (*LandTokenPausedIterator, error) {

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LandTokenPausedIterator{contract: _LandToken.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LandToken *LandTokenFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LandTokenPaused) (event.Subscription, error) {

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenPaused)
				if err := _LandToken.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LandToken *LandTokenFilterer) ParsePaused(log types.Log) (*LandTokenPaused, error) {
	event := new(LandTokenPaused)
	if err := _LandToken.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the LandToken contract.
type LandTokenRoleAdminChangedIterator struct {
	Event *LandTokenRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenRoleAdminChanged represents a RoleAdminChanged event raised by the LandToken contract.
type LandTokenRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LandToken *LandTokenFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*LandTokenRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenRoleAdminChangedIterator{contract: _LandToken.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LandToken *LandTokenFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *LandTokenRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenRoleAdminChanged)
				if err := _LandToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LandToken *LandTokenFilterer) ParseRoleAdminChanged(log types.Log) (*LandTokenRoleAdminChanged, error) {
	event := new(LandTokenRoleAdminChanged)
	if err := _LandToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the LandToken contract.
type LandTokenRoleGrantedIterator struct {
	Event *LandTokenRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenRoleGranted represents a RoleGranted event raised by the LandToken contract.
type LandTokenRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LandTokenRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenRoleGrantedIterator{contract: _LandToken.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *LandTokenRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenRoleGranted)
				if err := _LandToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) ParseRoleGranted(log types.Log) (*LandTokenRoleGranted, error) {
	event := new(LandTokenRoleGranted)
	if err := _LandToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the LandToken contract.
type LandTokenRoleRevokedIterator struct {
	Event *LandTokenRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenRoleRevoked represents a RoleRevoked event raised by the LandToken contract.
type LandTokenRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LandTokenRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenRoleRevokedIterator{contract: _LandToken.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *LandTokenRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenRoleRevoked)
				if err := _LandToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LandToken *LandTokenFilterer) ParseRoleRevoked(log types.Log) (*LandTokenRoleRevoked, error) {
	event := new(LandTokenRoleRevoked)
	if err := _LandToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenSecondarySaleFeesIterator is returned from FilterSecondarySaleFees and is used to iterate over the raw logs and unpacked data for SecondarySaleFees events raised by the LandToken contract.
type LandTokenSecondarySaleFeesIterator struct {
	Event *LandTokenSecondarySaleFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenSecondarySaleFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenSecondarySaleFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenSecondarySaleFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenSecondarySaleFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenSecondarySaleFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenSecondarySaleFees represents a SecondarySaleFees event raised by the LandToken contract.
type LandTokenSecondarySaleFees struct {
	TokenId    *big.Int
	Recipients []common.Address
	Bps        []*big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSecondarySaleFees is a free log retrieval operation binding the contract event 0x99aba1d63749cfd5ad1afda7c4663840924d54eb5f005bbbeadedc6ec13674b2.
//
// Solidity: event SecondarySaleFees(uint256 tokenId, address[] recipients, uint256[] bps)
func (_LandToken *LandTokenFilterer) FilterSecondarySaleFees(opts *bind.FilterOpts) (*LandTokenSecondarySaleFeesIterator, error) {

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "SecondarySaleFees")
	if err != nil {
		return nil, err
	}
	return &LandTokenSecondarySaleFeesIterator{contract: _LandToken.contract, event: "SecondarySaleFees", logs: logs, sub: sub}, nil
}

// WatchSecondarySaleFees is a free log subscription operation binding the contract event 0x99aba1d63749cfd5ad1afda7c4663840924d54eb5f005bbbeadedc6ec13674b2.
//
// Solidity: event SecondarySaleFees(uint256 tokenId, address[] recipients, uint256[] bps)
func (_LandToken *LandTokenFilterer) WatchSecondarySaleFees(opts *bind.WatchOpts, sink chan<- *LandTokenSecondarySaleFees) (event.Subscription, error) {

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "SecondarySaleFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenSecondarySaleFees)
				if err := _LandToken.contract.UnpackLog(event, "SecondarySaleFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSecondarySaleFees is a log parse operation binding the contract event 0x99aba1d63749cfd5ad1afda7c4663840924d54eb5f005bbbeadedc6ec13674b2.
//
// Solidity: event SecondarySaleFees(uint256 tokenId, address[] recipients, uint256[] bps)
func (_LandToken *LandTokenFilterer) ParseSecondarySaleFees(log types.Log) (*LandTokenSecondarySaleFees, error) {
	event := new(LandTokenSecondarySaleFees)
	if err := _LandToken.contract.UnpackLog(event, "SecondarySaleFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LandToken contract.
type LandTokenTransferIterator struct {
	Event *LandTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenTransfer represents a Transfer event raised by the LandToken contract.
type LandTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*LandTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenTransferIterator{contract: _LandToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LandTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenTransfer)
				if err := _LandToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_LandToken *LandTokenFilterer) ParseTransfer(log types.Log) (*LandTokenTransfer, error) {
	event := new(LandTokenTransfer)
	if err := _LandToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LandToken contract.
type LandTokenUnpausedIterator struct {
	Event *LandTokenUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenUnpaused represents a Unpaused event raised by the LandToken contract.
type LandTokenUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LandToken *LandTokenFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LandTokenUnpausedIterator, error) {

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LandTokenUnpausedIterator{contract: _LandToken.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LandToken *LandTokenFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LandTokenUnpaused) (event.Subscription, error) {

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenUnpaused)
				if err := _LandToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LandToken *LandTokenFilterer) ParseUnpaused(log types.Log) (*LandTokenUnpaused, error) {
	event := new(LandTokenUnpaused)
	if err := _LandToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTokenUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the LandToken contract.
type LandTokenUpgradedIterator struct {
	Event *LandTokenUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTokenUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTokenUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTokenUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTokenUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTokenUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTokenUpgraded represents a Upgraded event raised by the LandToken contract.
type LandTokenUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LandToken *LandTokenFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*LandTokenUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LandToken.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &LandTokenUpgradedIterator{contract: _LandToken.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LandToken *LandTokenFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *LandTokenUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LandToken.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTokenUpgraded)
				if err := _LandToken.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LandToken *LandTokenFilterer) ParseUpgraded(log types.Log) (*LandTokenUpgraded, error) {
	event := new(LandTokenUpgraded)
	if err := _LandToken.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
