// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ClubNFTMetaData contains all meta data concerning the ClubNFT contract.
var ClubNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rRecipientAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rPercebtage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"tokenids\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"totalSupplys\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"peerSupplys\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"ClubNFTSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RPercebtage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RRecipientAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RecipientAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"peerSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setClubNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rPercebtage_\",\"type\":\"uint256\"}],\"name\":\"setRPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rRecipientAddress_\",\"type\":\"address\"}],\"name\":\"setRRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress_\",\"type\":\"address\"}],\"name\":\"setRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162005f1f38038062005f1f833981810160405281019062000037919062000558565b806200004981620001ab60201b60201c565b506000600460006101000a81548160ff0219169083151502179055506200007a6000801b33620001c060201b60201c565b620000ac7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c33620001c060201b60201c565b620000de7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620001c060201b60201c565b620001107f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec33620001c060201b60201c565b84600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260088190555081600981905550505050505062000927565b8060029081620001bc919062000840565b5050565b620001d28282620002b260201b60201c565b620002ae5760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002536200031d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003668262000339565b9050919050565b620003788162000359565b81146200038457600080fd5b50565b60008151905062000398816200036d565b92915050565b6000819050919050565b620003b3816200039e565b8114620003bf57600080fd5b50565b600081519050620003d381620003a8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200042e82620003e3565b810181811067ffffffffffffffff8211171562000450576200044f620003f4565b5b80604052505050565b60006200046562000325565b905062000473828262000423565b919050565b600067ffffffffffffffff821115620004965762000495620003f4565b5b620004a182620003e3565b9050602081019050919050565b60005b83811015620004ce578082015181840152602081019050620004b1565b60008484015250505050565b6000620004f1620004eb8462000478565b62000459565b90508281526020810184848401111562000510576200050f620003de565b5b6200051d848285620004ae565b509392505050565b600082601f8301126200053d576200053c620003d9565b5b81516200054f848260208601620004da565b91505092915050565b600080600080600060a086880312156200057757620005766200032f565b5b6000620005878882890162000387565b95505060206200059a8882890162000387565b9450506040620005ad88828901620003c2565b9350506060620005c088828901620003c2565b925050608086015167ffffffffffffffff811115620005e457620005e362000334565b5b620005f28882890162000525565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200065257607f821691505b6020821081036200066857620006676200060a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000693565b620006de868362000693565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620007216200071b62000715846200039e565b620006f6565b6200039e565b9050919050565b6000819050919050565b6200073d8362000700565b620007556200074c8262000728565b848454620006a0565b825550505050565b600090565b6200076c6200075d565b6200077981848462000732565b505050565b5b81811015620007a1576200079560008262000762565b6001810190506200077f565b5050565b601f821115620007f057620007ba816200066e565b620007c58462000683565b81016020851015620007d5578190505b620007ed620007e48562000683565b8301826200077e565b50505b505050565b600082821c905092915050565b60006200081560001984600802620007f5565b1980831691505092915050565b600062000830838362000802565b9150826002028217905092915050565b6200084b82620005ff565b67ffffffffffffffff811115620008675762000866620003f4565b5b62000873825462000639565b62000880828285620007a5565b600060209050601f831160018114620008b85760008415620008a3578287015190505b620008af858262000822565b8655506200091f565b601f198416620008c8866200066e565b60005b82811015620008f257848901518255600182019150602085019450602081019050620008cb565b868310156200091257848901516200090e601f89168262000802565b8355505b6001600288020188555050505b505050505050565b6155e880620009376000396000f3fe6080604052600436106102035760003560e01c80635c975abb11610118578063cce2cc3d116100a0578063e63ab1e91161006f578063e63ab1e914610743578063e985e9c51461076e578063f214e442146107ab578063f242432a146107d4578063f5298aca146107fd57610203565b8063cce2cc3d1461069b578063d547741f146106c4578063e02023a1146106ed578063e5e3e5171461071857610203565b80638bc4be71116100e75780638bc4be71146105a257806391d14854146105cd578063a217fddf1461060a578063a22cb46514610635578063bd85b0391461065e57610203565b80635c975abb1461050c5780636b20c454146105375780637f345710146105605780638456cb591461058b57610203565b80632f2ff15d1161019b5780633e6cb0101161016a5780633e6cb010146104275780633f4ba83a146104505780634e1273f4146104675780634f558e79146104a45780634fcf37fa146104e157610203565b80632f2ff15d1461039557806336568abe146103be57806336bfc264146103e75780633ccfd60b1461041057610203565b80630e89341c116101d75780630e89341c146102c75780631102848214610304578063248a9ca31461032f5780632eb2c2d61461036c57610203565b8062fdd58e1461020857806301ffc9a71461024557806302fe53051461028257806308dc9f42146102ab575b600080fd5b34801561021457600080fd5b5061022f600480360381019061022a9190613470565b610826565b60405161023c91906134bf565b60405180910390f35b34801561025157600080fd5b5061026c60048036038101906102679190613532565b6108ee565b604051610279919061357a565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a491906136db565b610900565b005b6102c560048036038101906102c091906137c5565b610937565b005b3480156102d357600080fd5b506102ee60048036038101906102e99190613834565b610bde565b6040516102fb91906138e0565b60405180910390f35b34801561031057600080fd5b50610319610c72565b60405161032691906134bf565b60405180910390f35b34801561033b57600080fd5b5061035660048036038101906103519190613938565b610c78565b6040516103639190613974565b60405180910390f35b34801561037857600080fd5b50610393600480360381019061038e9190613a57565b610c98565b005b3480156103a157600080fd5b506103bc60048036038101906103b79190613b26565b610d39565b005b3480156103ca57600080fd5b506103e560048036038101906103e09190613b26565b610d5a565b005b3480156103f357600080fd5b5061040e60048036038101906104099190613b66565b610ddd565b005b34801561041c57600080fd5b50610425610e2f565b005b34801561043357600080fd5b5061044e60048036038101906104499190613b66565b610f2b565b005b34801561045c57600080fd5b50610465610f7d565b005b34801561047357600080fd5b5061048e60048036038101906104899190613c56565b610fb2565b60405161049b9190613d8c565b60405180910390f35b3480156104b057600080fd5b506104cb60048036038101906104c69190613834565b6110cb565b6040516104d8919061357a565b60405180910390f35b3480156104ed57600080fd5b506104f66110df565b60405161050391906134bf565b60405180910390f35b34801561051857600080fd5b506105216110e5565b60405161052e919061357a565b60405180910390f35b34801561054357600080fd5b5061055e60048036038101906105599190613dae565b6110fc565b005b34801561056c57600080fd5b50610575611199565b6040516105829190613974565b60405180910390f35b34801561059757600080fd5b506105a06111bd565b005b3480156105ae57600080fd5b506105b76111f2565b6040516105c49190613e48565b60405180910390f35b3480156105d957600080fd5b506105f460048036038101906105ef9190613b26565b611218565b604051610601919061357a565b60405180910390f35b34801561061657600080fd5b5061061f611283565b60405161062c9190613974565b60405180910390f35b34801561064157600080fd5b5061065c60048036038101906106579190613e8f565b61128a565b005b34801561066a57600080fd5b5061068560048036038101906106809190613834565b6112a0565b60405161069291906134bf565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd9190613ecf565b6112bd565b005b3480156106d057600080fd5b506106eb60048036038101906106e69190613b26565b61151a565b005b3480156106f957600080fd5b5061070261153b565b60405161070f9190613974565b60405180910390f35b34801561072457600080fd5b5061072d61155f565b60405161073a9190613e48565b60405180910390f35b34801561074f57600080fd5b50610758611585565b6040516107659190613974565b60405180910390f35b34801561077a57600080fd5b5061079560048036038101906107909190613fa6565b6115a9565b6040516107a2919061357a565b60405180910390f35b3480156107b757600080fd5b506107d260048036038101906107cd9190613834565b61163d565b005b3480156107e057600080fd5b506107fb60048036038101906107f69190613fe6565b611655565b005b34801561080957600080fd5b50610824600480360381019061081f919061407d565b6116f6565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d90614142565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006108f982611793565b9050919050565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c61092a8161180d565b61093382611821565b5050565b600061095f83600c60008781526020019081526020016000205461183490919063ffffffff16565b90506000811180156109715750803410155b6109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a7906141ae565b60405180910390fd5b6000600a6000868152602001908152602001600020541180156109f95750600a600085815260200190815260200160002054836109ec866112a0565b6109f691906141fd565b11155b610a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2f9061427d565b60405180910390fd5b6000610a443386610826565b9050600b6000868152602001908152602001600020548482610a6691906141fd565b1115610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e906142e9565b60405180910390fd5b6000600d6000878152602001908152602001600020805490501115610bcb57600d6000868152602001908152602001600020600081548110610aec57610aeb614309565b5b90600052602060002001544211610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90614384565b60405180910390fd5b6001600d6000878152602001908152602001600020805490501115610bca57600d6000868152602001908152602001600020600181548110610b7d57610b7c614309565b5b90600052602060002001544210610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc0906143f0565b60405180910390fd5b5b5b610bd73386868661184a565b5050505050565b606060028054610bed9061443f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c199061443f565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b50505050509050919050565b60085481565b600060036000838152602001908152602001600020600101549050919050565b610ca06119fa565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ce65750610ce585610ce06119fa565b6115a9565b5b610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c906144e2565b60405180910390fd5b610d328585858585611a02565b5050505050565b610d4282610c78565b610d4b8161180d565b610d558383611d23565b505050565b610d626119fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc690614574565b60405180910390fd5b610dd98282611e04565b5050565b6000801b610dea8161180d565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec610e598161180d565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610ea1906145c5565b60006040518083038185875af1925050503d8060008114610ede576040519150601f19603f3d011682016040523d82523d6000602084013e610ee3565b606091505b5050905080610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90614626565b60405180910390fd5b5050565b6000801b610f388161180d565b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610fa78161180d565b610faf611ee6565b50565b60608151835114610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef906146b8565b60405180910390fd5b6000835167ffffffffffffffff811115611015576110146135b0565b5b6040519080825280602002602001820160405280156110435781602001602082028036833780820191505090505b50905060005b84518110156110c05761109085828151811061106857611067614309565b5b602002602001015185838151811061108357611082614309565b5b6020026020010151610826565b8282815181106110a3576110a2614309565b5b602002602001018181525050806110b9906146d8565b9050611049565b508091505092915050565b6000806110d7836112a0565b119050919050565b60095481565b6000600460009054906101000a900460ff16905090565b6111046119fa565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061114a5750611149836111446119fa565b6115a9565b5b611189576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611180906144e2565b60405180910390fd5b611194838383611f49565b505050565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c81565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6111e78161180d565b6111ef612217565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61129c6112956119fa565b838361227a565b5050565b600060056000838152602001908152602001600020549050919050565b6000801b6112ca8161180d565b835185511461130e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113059061476c565b60405180910390fd5b8251855114611352576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113499061476c565b60405180910390fd5b8151855114611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d9061476c565b60405180910390fd5b60005b8551811015611499578481815181106113b5576113b4614309565b5b6020026020010151600a60008884815181106113d4576113d3614309565b5b602002602001015181526020019081526020016000208190555083818151811061140157611400614309565b5b6020026020010151600b60008884815181106114205761141f614309565b5b602002602001015181526020019081526020016000208190555082818151811061144d5761144c614309565b5b6020026020010151600c600088848151811061146c5761146b614309565b5b60200260200101518152602001908152602001600020819055508080611491906146d8565b915050611399565b50826040516114a8919061481c565b6040518091039020846040516114be919061481c565b6040518091039020866040516114d4919061481c565b60405180910390207fe2adb1fb4d82402ed428c00d74112d7361b7552407d76f3a6e9f4ced6878edf78560405161150b9190613d8c565b60405180910390a45050505050565b61152382610c78565b61152c8161180d565b6115368383611e04565b505050565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b61164a8161180d565b816008819055505050565b61165d6119fa565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806116a357506116a28561169d6119fa565b6115a9565b5b6116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d9906144e2565b60405180910390fd5b6116ef85858585856123e6565b5050505050565b6116fe6119fa565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061174457506117438361173e6119fa565b6115a9565b5b611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177a906144e2565b60405180910390fd5b61178e838383612681565b505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806118065750611805826128c7565b5b9050919050565b61181e816118196119fa565b6129a9565b50565b806002908161183091906149df565b5050565b600081836118429190614ab1565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090614b7d565b60405180910390fd5b60006118c36119fa565b905060006118d085612a46565b905060006118dd85612a46565b90506118ee83600089858589612ac0565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461194d91906141fd565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516119cb929190614b9d565b60405180910390a46119e283600089858589612ade565b6119f183600089898989612ae6565b50505050505050565b600033905090565b8151835114611a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3d90614c38565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aac90614cca565b60405180910390fd5b6000611abf6119fa565b9050611acf818787878787612ac0565b60005b8451811015611c80576000858281518110611af057611aef614309565b5b602002602001015190506000858381518110611b0f57611b0e614309565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba790614d5c565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c6591906141fd565b9250508190555050505080611c79906146d8565b9050611ad2565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cf7929190614d7c565b60405180910390a4611d0d818787878787612ade565b611d1b818787878787612cbd565b505050505050565b611d2d8282611218565b611e005760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611da56119fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611e0e8282611218565b15611ee25760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611e876119fa565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611eee612e94565b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611f326119fa565b604051611f3f9190613e48565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611fb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611faf90614e25565b60405180910390fd5b8051825114611ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff390614c38565b60405180910390fd5b60006120066119fa565b905061202681856000868660405180602001604052806000815250612ac0565b60005b835181101561217357600084828151811061204757612046614309565b5b60200260200101519050600084838151811061206657612065614309565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fe90614eb7565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050808061216b906146d8565b915050612029565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516121eb929190614d7c565b60405180910390a461221181856000868660405180602001604052806000815250612ade565b50505050565b61221f612edd565b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122636119fa565b6040516122709190613e48565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122df90614f49565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123d9919061357a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244c90614cca565b60405180910390fd5b600061245f6119fa565b9050600061246c85612a46565b9050600061247985612a46565b9050612489838989858589612ac0565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251790614d5c565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125d591906141fd565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612652929190614b9d565b60405180910390a4612668848a8a86868a612ade565b612676848a8a8a8a8a612ae6565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036126f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e790614e25565b60405180910390fd5b60006126fa6119fa565b9050600061270784612a46565b9050600061271484612a46565b905061273483876000858560405180602001604052806000815250612ac0565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c290614eb7565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051612898929190614b9d565b60405180910390a46128be84886000868660405180602001604052806000815250612ade565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061299257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806129a257506129a182612f27565b5b9050919050565b6129b38282611218565b612a42576129d88173ffffffffffffffffffffffffffffffffffffffff166014612f91565b6129e68360001c6020612f91565b6040516020016129f792919061503d565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3991906138e0565b60405180910390fd5b5050565b60606000600167ffffffffffffffff811115612a6557612a646135b0565b5b604051908082528060200260200182016040528015612a935781602001602082028036833780820191505090505b5090508281600081518110612aab57612aaa614309565b5b60200260200101818152505080915050919050565b612ac8612edd565b612ad68686868686866131cd565b505050505050565b505050505050565b612b058473ffffffffffffffffffffffffffffffffffffffff1661339d565b15612cb5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612b4b9594939291906150cc565b6020604051808303816000875af1925050508015612b8757506040513d601f19601f82011682018060405250810190612b84919061513b565b60015b612c2c57612b93615175565b806308c379a003612bef5750612ba7615197565b80612bb25750612bf1565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be691906138e0565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2390615299565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612caa9061532b565b60405180910390fd5b505b505050505050565b612cdc8473ffffffffffffffffffffffffffffffffffffffff1661339d565b15612e8c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612d2295949392919061534b565b6020604051808303816000875af1925050508015612d5e57506040513d601f19601f82011682018060405250810190612d5b919061513b565b60015b612e0357612d6a615175565b806308c379a003612dc65750612d7e615197565b80612d895750612dc8565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbd91906138e0565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dfa90615299565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e819061532b565b60405180910390fd5b505b505050505050565b612e9c6110e5565b612edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed2906153ff565b60405180910390fd5b565b612ee56110e5565b15612f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1c9061546b565b60405180910390fd5b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060006002836002612fa49190614ab1565b612fae91906141fd565b67ffffffffffffffff811115612fc757612fc66135b0565b5b6040519080825280601f01601f191660200182016040528015612ff95781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061303157613030614309565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061309557613094614309565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026130d59190614ab1565b6130df91906141fd565b90505b600181111561317f577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061312157613120614309565b5b1a60f81b82828151811061313857613137614309565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806131789061548b565b90506130e2565b50600084146131c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131ba90615500565b60405180910390fd5b8091505092915050565b6131db8686868686866133c0565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361328c5760005b835181101561328a5782818151811061322e5761322d614309565b5b60200260200101516005600086848151811061324d5761324c614309565b5b60200260200101518152602001908152602001600020600082825461327291906141fd565b9250508190555080613283906146d8565b9050613212565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036133955760005b83518110156133935760008482815181106132e1576132e0614309565b5b602002602001015190506000848381518110613300576132ff614309565b5b6020026020010151905060006005600084815260200190815260200160002054905081811015613365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335c90615592565b60405180910390fd5b81810360056000858152602001908152602001600020819055505050508061338c906146d8565b90506132c3565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613407826133dc565b9050919050565b613417816133fc565b811461342257600080fd5b50565b6000813590506134348161340e565b92915050565b6000819050919050565b61344d8161343a565b811461345857600080fd5b50565b60008135905061346a81613444565b92915050565b60008060408385031215613487576134866133d2565b5b600061349585828601613425565b92505060206134a68582860161345b565b9150509250929050565b6134b98161343a565b82525050565b60006020820190506134d460008301846134b0565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61350f816134da565b811461351a57600080fd5b50565b60008135905061352c81613506565b92915050565b600060208284031215613548576135476133d2565b5b60006135568482850161351d565b91505092915050565b60008115159050919050565b6135748161355f565b82525050565b600060208201905061358f600083018461356b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135e88261359f565b810181811067ffffffffffffffff82111715613607576136066135b0565b5b80604052505050565b600061361a6133c8565b905061362682826135df565b919050565b600067ffffffffffffffff821115613646576136456135b0565b5b61364f8261359f565b9050602081019050919050565b82818337600083830152505050565b600061367e6136798461362b565b613610565b90508281526020810184848401111561369a5761369961359a565b5b6136a584828561365c565b509392505050565b600082601f8301126136c2576136c1613595565b5b81356136d284826020860161366b565b91505092915050565b6000602082840312156136f1576136f06133d2565b5b600082013567ffffffffffffffff81111561370f5761370e6133d7565b5b61371b848285016136ad565b91505092915050565b600067ffffffffffffffff82111561373f5761373e6135b0565b5b6137488261359f565b9050602081019050919050565b600061376861376384613724565b613610565b9050828152602081018484840111156137845761378361359a565b5b61378f84828561365c565b509392505050565b600082601f8301126137ac576137ab613595565b5b81356137bc848260208601613755565b91505092915050565b6000806000606084860312156137de576137dd6133d2565b5b60006137ec8682870161345b565b93505060206137fd8682870161345b565b925050604084013567ffffffffffffffff81111561381e5761381d6133d7565b5b61382a86828701613797565b9150509250925092565b60006020828403121561384a576138496133d2565b5b60006138588482850161345b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561389b578082015181840152602081019050613880565b60008484015250505050565b60006138b282613861565b6138bc818561386c565b93506138cc81856020860161387d565b6138d58161359f565b840191505092915050565b600060208201905081810360008301526138fa81846138a7565b905092915050565b6000819050919050565b61391581613902565b811461392057600080fd5b50565b6000813590506139328161390c565b92915050565b60006020828403121561394e5761394d6133d2565b5b600061395c84828501613923565b91505092915050565b61396e81613902565b82525050565b60006020820190506139896000830184613965565b92915050565b600067ffffffffffffffff8211156139aa576139a96135b0565b5b602082029050602081019050919050565b600080fd5b60006139d36139ce8461398f565b613610565b905080838252602082019050602084028301858111156139f6576139f56139bb565b5b835b81811015613a1f5780613a0b888261345b565b8452602084019350506020810190506139f8565b5050509392505050565b600082601f830112613a3e57613a3d613595565b5b8135613a4e8482602086016139c0565b91505092915050565b600080600080600060a08688031215613a7357613a726133d2565b5b6000613a8188828901613425565b9550506020613a9288828901613425565b945050604086013567ffffffffffffffff811115613ab357613ab26133d7565b5b613abf88828901613a29565b935050606086013567ffffffffffffffff811115613ae057613adf6133d7565b5b613aec88828901613a29565b925050608086013567ffffffffffffffff811115613b0d57613b0c6133d7565b5b613b1988828901613797565b9150509295509295909350565b60008060408385031215613b3d57613b3c6133d2565b5b6000613b4b85828601613923565b9250506020613b5c85828601613425565b9150509250929050565b600060208284031215613b7c57613b7b6133d2565b5b6000613b8a84828501613425565b91505092915050565b600067ffffffffffffffff821115613bae57613bad6135b0565b5b602082029050602081019050919050565b6000613bd2613bcd84613b93565b613610565b90508083825260208201905060208402830185811115613bf557613bf46139bb565b5b835b81811015613c1e5780613c0a8882613425565b845260208401935050602081019050613bf7565b5050509392505050565b600082601f830112613c3d57613c3c613595565b5b8135613c4d848260208601613bbf565b91505092915050565b60008060408385031215613c6d57613c6c6133d2565b5b600083013567ffffffffffffffff811115613c8b57613c8a6133d7565b5b613c9785828601613c28565b925050602083013567ffffffffffffffff811115613cb857613cb76133d7565b5b613cc485828601613a29565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613d038161343a565b82525050565b6000613d158383613cfa565b60208301905092915050565b6000602082019050919050565b6000613d3982613cce565b613d438185613cd9565b9350613d4e83613cea565b8060005b83811015613d7f578151613d668882613d09565b9750613d7183613d21565b925050600181019050613d52565b5085935050505092915050565b60006020820190508181036000830152613da68184613d2e565b905092915050565b600080600060608486031215613dc757613dc66133d2565b5b6000613dd586828701613425565b935050602084013567ffffffffffffffff811115613df657613df56133d7565b5b613e0286828701613a29565b925050604084013567ffffffffffffffff811115613e2357613e226133d7565b5b613e2f86828701613a29565b9150509250925092565b613e42816133fc565b82525050565b6000602082019050613e5d6000830184613e39565b92915050565b613e6c8161355f565b8114613e7757600080fd5b50565b600081359050613e8981613e63565b92915050565b60008060408385031215613ea657613ea56133d2565b5b6000613eb485828601613425565b9250506020613ec585828601613e7a565b9150509250929050565b60008060008060808587031215613ee957613ee86133d2565b5b600085013567ffffffffffffffff811115613f0757613f066133d7565b5b613f1387828801613a29565b945050602085013567ffffffffffffffff811115613f3457613f336133d7565b5b613f4087828801613a29565b935050604085013567ffffffffffffffff811115613f6157613f606133d7565b5b613f6d87828801613a29565b925050606085013567ffffffffffffffff811115613f8e57613f8d6133d7565b5b613f9a87828801613a29565b91505092959194509250565b60008060408385031215613fbd57613fbc6133d2565b5b6000613fcb85828601613425565b9250506020613fdc85828601613425565b9150509250929050565b600080600080600060a08688031215614002576140016133d2565b5b600061401088828901613425565b955050602061402188828901613425565b94505060406140328882890161345b565b93505060606140438882890161345b565b925050608086013567ffffffffffffffff811115614064576140636133d7565b5b61407088828901613797565b9150509295509295909350565b600080600060608486031215614096576140956133d2565b5b60006140a486828701613425565b93505060206140b58682870161345b565b92505060406140c68682870161345b565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061412c602a8361386c565b9150614137826140d0565b604082019050919050565b6000602082019050818103600083015261415b8161411f565b9050919050565b7f6d73672e76616c756520697320696e636f727265637400000000000000000000600082015250565b600061419860168361386c565b91506141a382614162565b602082019050919050565b600060208201905081810360008301526141c78161418b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142088261343a565b91506142138361343a565b925082820190508082111561422b5761422a6141ce565b5b92915050565b7f746f74616c206c696d6974000000000000000000000000000000000000000000600082015250565b6000614267600b8361386c565b915061427282614231565b602082019050919050565b600060208201905081810360008301526142968161425a565b9050919050565b7f7065657220746f74616c206c696d697400000000000000000000000000000000600082015250565b60006142d360108361386c565b91506142de8261429d565b602082019050919050565b60006020820190508181036000830152614302816142c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f7374617274206174000000000000000000000000000000000000000000000000600082015250565b600061436e60088361386c565b915061437982614338565b602082019050919050565b6000602082019050818103600083015261439d81614361565b9050919050565b7f656e647420617400000000000000000000000000000000000000000000000000600082015250565b60006143da60078361386c565b91506143e5826143a4565b602082019050919050565b60006020820190508181036000830152614409816143cd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061445757607f821691505b60208210810361446a57614469614410565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b60006144cc602f8361386c565b91506144d782614470565b604082019050919050565b600060208201905081810360008301526144fb816144bf565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061455e602f8361386c565b915061456982614502565b604082019050919050565b6000602082019050818103600083015261458d81614551565b9050919050565b600081905092915050565b50565b60006145af600083614594565b91506145ba8261459f565b600082019050919050565b60006145d0826145a2565b9150819050919050565b7f4661696c656420746f2073656e6420456e746572000000000000000000000000600082015250565b600061461060148361386c565b915061461b826145da565b602082019050919050565b6000602082019050818103600083015261463f81614603565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006146a260298361386c565b91506146ad82614646565b604082019050919050565b600060208201905081810360008301526146d181614695565b9050919050565b60006146e38261343a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614715576147146141ce565b5b600182019050919050565b7f6461746120657272000000000000000000000000000000000000000000000000600082015250565b600061475660088361386c565b915061476182614720565b602082019050919050565b6000602082019050818103600083015261478581614749565b9050919050565b600081905092915050565b6147a08161343a565b82525050565b60006147b28383614797565b60208301905092915050565b60006147c982613cce565b6147d3818561478c565b93506147de83613cea565b8060005b8381101561480f5781516147f688826147a6565b975061480183613d21565b9250506001810190506147e2565b5085935050505092915050565b600061482882846147be565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614858565b61489f8683614858565b95508019841693508086168417925050509392505050565b6000819050919050565b60006148dc6148d76148d28461343a565b6148b7565b61343a565b9050919050565b6000819050919050565b6148f6836148c1565b61490a614902826148e3565b848454614865565b825550505050565b600090565b61491f614912565b61492a8184846148ed565b505050565b5b8181101561494e57614943600082614917565b600181019050614930565b5050565b601f8211156149935761496481614833565b61496d84614848565b8101602085101561497c578190505b61499061498885614848565b83018261492f565b50505b505050565b600082821c905092915050565b60006149b660001984600802614998565b1980831691505092915050565b60006149cf83836149a5565b9150826002028217905092915050565b6149e882613861565b67ffffffffffffffff811115614a0157614a006135b0565b5b614a0b825461443f565b614a16828285614952565b600060209050601f831160018114614a495760008415614a37578287015190505b614a4185826149c3565b865550614aa9565b601f198416614a5786614833565b60005b82811015614a7f57848901518255600182019150602085019450602081019050614a5a565b86831015614a9c5784890151614a98601f8916826149a5565b8355505b6001600288020188555050505b505050505050565b6000614abc8261343a565b9150614ac78361343a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614b0057614aff6141ce565b5b828202905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b6760218361386c565b9150614b7282614b0b565b604082019050919050565b60006020820190508181036000830152614b9681614b5a565b9050919050565b6000604082019050614bb260008301856134b0565b614bbf60208301846134b0565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614c2260288361386c565b9150614c2d82614bc6565b604082019050919050565b60006020820190508181036000830152614c5181614c15565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614cb460258361386c565b9150614cbf82614c58565b604082019050919050565b60006020820190508181036000830152614ce381614ca7565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614d46602a8361386c565b9150614d5182614cea565b604082019050919050565b60006020820190508181036000830152614d7581614d39565b9050919050565b60006040820190508181036000830152614d968185613d2e565b90508181036020830152614daa8184613d2e565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614e0f60238361386c565b9150614e1a82614db3565b604082019050919050565b60006020820190508181036000830152614e3e81614e02565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614ea160248361386c565b9150614eac82614e45565b604082019050919050565b60006020820190508181036000830152614ed081614e94565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614f3360298361386c565b9150614f3e82614ed7565b604082019050919050565b60006020820190508181036000830152614f6281614f26565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614faa601783614f69565b9150614fb582614f74565b601782019050919050565b6000614fcb82613861565b614fd58185614f69565b9350614fe581856020860161387d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615027601183614f69565b915061503282614ff1565b601182019050919050565b600061504882614f9d565b91506150548285614fc0565b915061505f8261501a565b915061506b8284614fc0565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061509e82615077565b6150a88185615082565b93506150b881856020860161387d565b6150c18161359f565b840191505092915050565b600060a0820190506150e16000830188613e39565b6150ee6020830187613e39565b6150fb60408301866134b0565b61510860608301856134b0565b818103608083015261511a8184615093565b90509695505050505050565b60008151905061513581613506565b92915050565b600060208284031215615151576151506133d2565b5b600061515f84828501615126565b91505092915050565b60008160e01c9050919050565b600060033d11156151945760046000803e615191600051615168565b90505b90565b600060443d10615224576151a96133c8565b60043d036004823e80513d602482011167ffffffffffffffff821117156151d1575050615224565b808201805167ffffffffffffffff8111156151ef5750505050615224565b80602083010160043d03850181111561520c575050505050615224565b61521b826020018501866135df565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061528360348361386c565b915061528e82615227565b604082019050919050565b600060208201905081810360008301526152b281615276565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061531560288361386c565b9150615320826152b9565b604082019050919050565b6000602082019050818103600083015261534481615308565b9050919050565b600060a0820190506153606000830188613e39565b61536d6020830187613e39565b818103604083015261537f8186613d2e565b905081810360608301526153938185613d2e565b905081810360808301526153a78184615093565b90509695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006153e960148361386c565b91506153f4826153b3565b602082019050919050565b60006020820190508181036000830152615418816153dc565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061545560108361386c565b91506154608261541f565b602082019050919050565b6000602082019050818103600083015261548481615448565b9050919050565b60006154968261343a565b9150600082036154a9576154a86141ce565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006154ea60208361386c565b91506154f5826154b4565b602082019050919050565b60006020820190508181036000830152615519816154dd565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b600061557c60288361386c565b915061558782615520565b604082019050919050565b600060208201905081810360008301526155ab8161556f565b905091905056fea2646970667358221220a68b71df8550f9b191fc0fc55ec16fda85089cabea5624e2299fcb806d4247fa64736f6c63430008100033",
}

// ClubNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use ClubNFTMetaData.ABI instead.
var ClubNFTABI = ClubNFTMetaData.ABI

// ClubNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ClubNFTMetaData.Bin instead.
var ClubNFTBin = ClubNFTMetaData.Bin

// DeployClubNFT deploys a new Ethereum contract, binding an instance of ClubNFT to it.
func DeployClubNFT(auth *bind.TransactOpts, backend bind.ContractBackend, recipientAddress_ common.Address, rRecipientAddress_ common.Address, rPercebtage_ *big.Int, platformFee_ *big.Int, uri_ string) (common.Address, *types.Transaction, *ClubNFT, error) {
	parsed, err := ClubNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ClubNFTBin), backend, recipientAddress_, rRecipientAddress_, rPercebtage_, platformFee_, uri_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ClubNFT{ClubNFTCaller: ClubNFTCaller{contract: contract}, ClubNFTTransactor: ClubNFTTransactor{contract: contract}, ClubNFTFilterer: ClubNFTFilterer{contract: contract}}, nil
}

// ClubNFT is an auto generated Go binding around an Ethereum contract.
type ClubNFT struct {
	ClubNFTCaller     // Read-only binding to the contract
	ClubNFTTransactor // Write-only binding to the contract
	ClubNFTFilterer   // Log filterer for contract events
}

// ClubNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClubNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClubNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClubNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClubNFTSession struct {
	Contract     *ClubNFT          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClubNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClubNFTCallerSession struct {
	Contract *ClubNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ClubNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClubNFTTransactorSession struct {
	Contract     *ClubNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ClubNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClubNFTRaw struct {
	Contract *ClubNFT // Generic contract binding to access the raw methods on
}

// ClubNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClubNFTCallerRaw struct {
	Contract *ClubNFTCaller // Generic read-only contract binding to access the raw methods on
}

// ClubNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClubNFTTransactorRaw struct {
	Contract *ClubNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClubNFT creates a new instance of ClubNFT, bound to a specific deployed contract.
func NewClubNFT(address common.Address, backend bind.ContractBackend) (*ClubNFT, error) {
	contract, err := bindClubNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ClubNFT{ClubNFTCaller: ClubNFTCaller{contract: contract}, ClubNFTTransactor: ClubNFTTransactor{contract: contract}, ClubNFTFilterer: ClubNFTFilterer{contract: contract}}, nil
}

// NewClubNFTCaller creates a new read-only instance of ClubNFT, bound to a specific deployed contract.
func NewClubNFTCaller(address common.Address, caller bind.ContractCaller) (*ClubNFTCaller, error) {
	contract, err := bindClubNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClubNFTCaller{contract: contract}, nil
}

// NewClubNFTTransactor creates a new write-only instance of ClubNFT, bound to a specific deployed contract.
func NewClubNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*ClubNFTTransactor, error) {
	contract, err := bindClubNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClubNFTTransactor{contract: contract}, nil
}

// NewClubNFTFilterer creates a new log filterer instance of ClubNFT, bound to a specific deployed contract.
func NewClubNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*ClubNFTFilterer, error) {
	contract, err := bindClubNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClubNFTFilterer{contract: contract}, nil
}

// bindClubNFT binds a generic wrapper to an already deployed contract.
func bindClubNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClubNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClubNFT *ClubNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClubNFT.Contract.ClubNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClubNFT *ClubNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFT.Contract.ClubNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClubNFT *ClubNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ClubNFT.Contract.ClubNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClubNFT *ClubNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClubNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClubNFT *ClubNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClubNFT *ClubNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ClubNFT.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClubNFT.Contract.DEFAULTADMINROLE(&_ClubNFT.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClubNFT.Contract.DEFAULTADMINROLE(&_ClubNFT.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTSession) PAUSERROLE() ([32]byte, error) {
	return _ClubNFT.Contract.PAUSERROLE(&_ClubNFT.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCallerSession) PAUSERROLE() ([32]byte, error) {
	return _ClubNFT.Contract.PAUSERROLE(&_ClubNFT.CallOpts)
}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFT *ClubNFTCaller) PlatformFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "PlatformFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFT *ClubNFTSession) PlatformFee() (*big.Int, error) {
	return _ClubNFT.Contract.PlatformFee(&_ClubNFT.CallOpts)
}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFT *ClubNFTCallerSession) PlatformFee() (*big.Int, error) {
	return _ClubNFT.Contract.PlatformFee(&_ClubNFT.CallOpts)
}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_ClubNFT *ClubNFTCaller) RPercebtage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "RPercebtage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_ClubNFT *ClubNFTSession) RPercebtage() (*big.Int, error) {
	return _ClubNFT.Contract.RPercebtage(&_ClubNFT.CallOpts)
}

// RPercebtage is a free data retrieval call binding the contract method 0x11028482.
//
// Solidity: function RPercebtage() view returns(uint256)
func (_ClubNFT *ClubNFTCallerSession) RPercebtage() (*big.Int, error) {
	return _ClubNFT.Contract.RPercebtage(&_ClubNFT.CallOpts)
}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTCaller) RRecipientAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "RRecipientAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTSession) RRecipientAddress() (common.Address, error) {
	return _ClubNFT.Contract.RRecipientAddress(&_ClubNFT.CallOpts)
}

// RRecipientAddress is a free data retrieval call binding the contract method 0x8bc4be71.
//
// Solidity: function RRecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTCallerSession) RRecipientAddress() (common.Address, error) {
	return _ClubNFT.Contract.RRecipientAddress(&_ClubNFT.CallOpts)
}

// RecipientAddress is a free data retrieval call binding the contract method 0xe5e3e517.
//
// Solidity: function RecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTCaller) RecipientAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "RecipientAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecipientAddress is a free data retrieval call binding the contract method 0xe5e3e517.
//
// Solidity: function RecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTSession) RecipientAddress() (common.Address, error) {
	return _ClubNFT.Contract.RecipientAddress(&_ClubNFT.CallOpts)
}

// RecipientAddress is a free data retrieval call binding the contract method 0xe5e3e517.
//
// Solidity: function RecipientAddress() view returns(address)
func (_ClubNFT *ClubNFTCallerSession) RecipientAddress() (common.Address, error) {
	return _ClubNFT.Contract.RecipientAddress(&_ClubNFT.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCaller) URISETTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "URI_SETTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTSession) URISETTERROLE() ([32]byte, error) {
	return _ClubNFT.Contract.URISETTERROLE(&_ClubNFT.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCallerSession) URISETTERROLE() ([32]byte, error) {
	return _ClubNFT.Contract.URISETTERROLE(&_ClubNFT.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCaller) WITHDRAWROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "WITHDRAW_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTSession) WITHDRAWROLE() ([32]byte, error) {
	return _ClubNFT.Contract.WITHDRAWROLE(&_ClubNFT.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFT *ClubNFTCallerSession) WITHDRAWROLE() ([32]byte, error) {
	return _ClubNFT.Contract.WITHDRAWROLE(&_ClubNFT.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ClubNFT.Contract.BalanceOf(&_ClubNFT.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ClubNFT.Contract.BalanceOf(&_ClubNFT.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFT *ClubNFTCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFT *ClubNFTSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ClubNFT.Contract.BalanceOfBatch(&_ClubNFT.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFT *ClubNFTCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ClubNFT.Contract.BalanceOfBatch(&_ClubNFT.CallOpts, accounts, ids)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFT *ClubNFTCaller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFT *ClubNFTSession) Exists(id *big.Int) (bool, error) {
	return _ClubNFT.Contract.Exists(&_ClubNFT.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFT *ClubNFTCallerSession) Exists(id *big.Int) (bool, error) {
	return _ClubNFT.Contract.Exists(&_ClubNFT.CallOpts, id)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFT *ClubNFTCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFT *ClubNFTSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClubNFT.Contract.GetRoleAdmin(&_ClubNFT.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFT *ClubNFTCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClubNFT.Contract.GetRoleAdmin(&_ClubNFT.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFT *ClubNFTCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFT *ClubNFTSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClubNFT.Contract.HasRole(&_ClubNFT.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFT *ClubNFTCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClubNFT.Contract.HasRole(&_ClubNFT.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFT *ClubNFTCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFT *ClubNFTSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ClubNFT.Contract.IsApprovedForAll(&_ClubNFT.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFT *ClubNFTCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ClubNFT.Contract.IsApprovedForAll(&_ClubNFT.CallOpts, account, operator)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFT *ClubNFTCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFT *ClubNFTSession) Paused() (bool, error) {
	return _ClubNFT.Contract.Paused(&_ClubNFT.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFT *ClubNFTCallerSession) Paused() (bool, error) {
	return _ClubNFT.Contract.Paused(&_ClubNFT.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFT *ClubNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFT *ClubNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClubNFT.Contract.SupportsInterface(&_ClubNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFT *ClubNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClubNFT.Contract.SupportsInterface(&_ClubNFT.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTCaller) TotalSupply(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "totalSupply", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _ClubNFT.Contract.TotalSupply(&_ClubNFT.CallOpts, id)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFT *ClubNFTCallerSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _ClubNFT.Contract.TotalSupply(&_ClubNFT.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFT *ClubNFTCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _ClubNFT.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFT *ClubNFTSession) Uri(arg0 *big.Int) (string, error) {
	return _ClubNFT.Contract.Uri(&_ClubNFT.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFT *ClubNFTCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _ClubNFT.Contract.Uri(&_ClubNFT.CallOpts, arg0)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFT *ClubNFTTransactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFT *ClubNFTSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.Burn(&_ClubNFT.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFT *ClubNFTTransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.Burn(&_ClubNFT.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFT *ClubNFTTransactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFT *ClubNFTSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.BurnBatch(&_ClubNFT.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFT *ClubNFTTransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.BurnBatch(&_ClubNFT.TransactOpts, account, ids, values)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.GrantRole(&_ClubNFT.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.GrantRole(&_ClubNFT.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x08dc9f42.
//
// Solidity: function mint(uint256 tokenId, uint256 amount, bytes data) payable returns()
func (_ClubNFT *ClubNFTTransactor) Mint(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "mint", tokenId, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x08dc9f42.
//
// Solidity: function mint(uint256 tokenId, uint256 amount, bytes data) payable returns()
func (_ClubNFT *ClubNFTSession) Mint(tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.Mint(&_ClubNFT.TransactOpts, tokenId, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x08dc9f42.
//
// Solidity: function mint(uint256 tokenId, uint256 amount, bytes data) payable returns()
func (_ClubNFT *ClubNFTTransactorSession) Mint(tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.Mint(&_ClubNFT.TransactOpts, tokenId, amount, data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFT *ClubNFTTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFT *ClubNFTSession) Pause() (*types.Transaction, error) {
	return _ClubNFT.Contract.Pause(&_ClubNFT.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFT *ClubNFTTransactorSession) Pause() (*types.Transaction, error) {
	return _ClubNFT.Contract.Pause(&_ClubNFT.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.RenounceRole(&_ClubNFT.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.RenounceRole(&_ClubNFT.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.RevokeRole(&_ClubNFT.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFT *ClubNFTTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.RevokeRole(&_ClubNFT.TransactOpts, role, account)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFT *ClubNFTTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFT *ClubNFTSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.SafeBatchTransferFrom(&_ClubNFT.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFT *ClubNFTTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.SafeBatchTransferFrom(&_ClubNFT.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFT *ClubNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFT *ClubNFTSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.SafeTransferFrom(&_ClubNFT.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFT *ClubNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFT.Contract.SafeTransferFrom(&_ClubNFT.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFT *ClubNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFT *ClubNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetApprovalForAll(&_ClubNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetApprovalForAll(&_ClubNFT.TransactOpts, operator, approved)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0xcce2cc3d.
//
// Solidity: function setClubNFT(uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices) returns()
func (_ClubNFT *ClubNFTTransactor) SetClubNFT(opts *bind.TransactOpts, tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setClubNFT", tokenids, totalSupplys, peerSupplys, prices)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0xcce2cc3d.
//
// Solidity: function setClubNFT(uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices) returns()
func (_ClubNFT *ClubNFTSession) SetClubNFT(tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetClubNFT(&_ClubNFT.TransactOpts, tokenids, totalSupplys, peerSupplys, prices)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0xcce2cc3d.
//
// Solidity: function setClubNFT(uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetClubNFT(tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetClubNFT(&_ClubNFT.TransactOpts, tokenids, totalSupplys, peerSupplys, prices)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xf214e442.
//
// Solidity: function setRPercentage(uint256 rPercebtage_) returns()
func (_ClubNFT *ClubNFTTransactor) SetRPercentage(opts *bind.TransactOpts, rPercebtage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setRPercentage", rPercebtage_)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xf214e442.
//
// Solidity: function setRPercentage(uint256 rPercebtage_) returns()
func (_ClubNFT *ClubNFTSession) SetRPercentage(rPercebtage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRPercentage(&_ClubNFT.TransactOpts, rPercebtage_)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xf214e442.
//
// Solidity: function setRPercentage(uint256 rPercebtage_) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetRPercentage(rPercebtage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRPercentage(&_ClubNFT.TransactOpts, rPercebtage_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x3e6cb010.
//
// Solidity: function setRRecipientAddress(address rRecipientAddress_) returns()
func (_ClubNFT *ClubNFTTransactor) SetRRecipientAddress(opts *bind.TransactOpts, rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setRRecipientAddress", rRecipientAddress_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x3e6cb010.
//
// Solidity: function setRRecipientAddress(address rRecipientAddress_) returns()
func (_ClubNFT *ClubNFTSession) SetRRecipientAddress(rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRRecipientAddress(&_ClubNFT.TransactOpts, rRecipientAddress_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x3e6cb010.
//
// Solidity: function setRRecipientAddress(address rRecipientAddress_) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetRRecipientAddress(rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRRecipientAddress(&_ClubNFT.TransactOpts, rRecipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x36bfc264.
//
// Solidity: function setRecipientAddress(address recipientAddress_) returns()
func (_ClubNFT *ClubNFTTransactor) SetRecipientAddress(opts *bind.TransactOpts, recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setRecipientAddress", recipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x36bfc264.
//
// Solidity: function setRecipientAddress(address recipientAddress_) returns()
func (_ClubNFT *ClubNFTSession) SetRecipientAddress(recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRecipientAddress(&_ClubNFT.TransactOpts, recipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x36bfc264.
//
// Solidity: function setRecipientAddress(address recipientAddress_) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetRecipientAddress(recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetRecipientAddress(&_ClubNFT.TransactOpts, recipientAddress_)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFT *ClubNFTTransactor) SetURI(opts *bind.TransactOpts, newuri string) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "setURI", newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFT *ClubNFTSession) SetURI(newuri string) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetURI(&_ClubNFT.TransactOpts, newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFT *ClubNFTTransactorSession) SetURI(newuri string) (*types.Transaction, error) {
	return _ClubNFT.Contract.SetURI(&_ClubNFT.TransactOpts, newuri)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFT *ClubNFTTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFT *ClubNFTSession) Unpause() (*types.Transaction, error) {
	return _ClubNFT.Contract.Unpause(&_ClubNFT.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFT *ClubNFTTransactorSession) Unpause() (*types.Transaction, error) {
	return _ClubNFT.Contract.Unpause(&_ClubNFT.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_ClubNFT *ClubNFTTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFT.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_ClubNFT *ClubNFTSession) Withdraw() (*types.Transaction, error) {
	return _ClubNFT.Contract.Withdraw(&_ClubNFT.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_ClubNFT *ClubNFTTransactorSession) Withdraw() (*types.Transaction, error) {
	return _ClubNFT.Contract.Withdraw(&_ClubNFT.TransactOpts)
}

// ClubNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ClubNFT contract.
type ClubNFTApprovalForAllIterator struct {
	Event *ClubNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTApprovalForAll represents a ApprovalForAll event raised by the ClubNFT contract.
type ClubNFTApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFT *ClubNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*ClubNFTApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTApprovalForAllIterator{contract: _ClubNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFT *ClubNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ClubNFTApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTApprovalForAll)
				if err := _ClubNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFT *ClubNFTFilterer) ParseApprovalForAll(log types.Log) (*ClubNFTApprovalForAll, error) {
	event := new(ClubNFTApprovalForAll)
	if err := _ClubNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTClubNFTSettingIterator is returned from FilterClubNFTSetting and is used to iterate over the raw logs and unpacked data for ClubNFTSetting events raised by the ClubNFT contract.
type ClubNFTClubNFTSettingIterator struct {
	Event *ClubNFTClubNFTSetting // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTClubNFTSettingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTClubNFTSetting)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTClubNFTSetting)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTClubNFTSettingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTClubNFTSettingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTClubNFTSetting represents a ClubNFTSetting event raised by the ClubNFT contract.
type ClubNFTClubNFTSetting struct {
	Tokenids     []*big.Int
	TotalSupplys []*big.Int
	PeerSupplys  []*big.Int
	Prices       []*big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterClubNFTSetting is a free log retrieval operation binding the contract event 0xe2adb1fb4d82402ed428c00d74112d7361b7552407d76f3a6e9f4ced6878edf7.
//
// Solidity: event ClubNFTSetting(uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] indexed peerSupplys, uint256[] prices)
func (_ClubNFT *ClubNFTFilterer) FilterClubNFTSetting(opts *bind.FilterOpts, tokenids [][]*big.Int, totalSupplys [][]*big.Int, peerSupplys [][]*big.Int) (*ClubNFTClubNFTSettingIterator, error) {

	var tokenidsRule []interface{}
	for _, tokenidsItem := range tokenids {
		tokenidsRule = append(tokenidsRule, tokenidsItem)
	}
	var totalSupplysRule []interface{}
	for _, totalSupplysItem := range totalSupplys {
		totalSupplysRule = append(totalSupplysRule, totalSupplysItem)
	}
	var peerSupplysRule []interface{}
	for _, peerSupplysItem := range peerSupplys {
		peerSupplysRule = append(peerSupplysRule, peerSupplysItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "ClubNFTSetting", tokenidsRule, totalSupplysRule, peerSupplysRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTClubNFTSettingIterator{contract: _ClubNFT.contract, event: "ClubNFTSetting", logs: logs, sub: sub}, nil
}

// WatchClubNFTSetting is a free log subscription operation binding the contract event 0xe2adb1fb4d82402ed428c00d74112d7361b7552407d76f3a6e9f4ced6878edf7.
//
// Solidity: event ClubNFTSetting(uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] indexed peerSupplys, uint256[] prices)
func (_ClubNFT *ClubNFTFilterer) WatchClubNFTSetting(opts *bind.WatchOpts, sink chan<- *ClubNFTClubNFTSetting, tokenids [][]*big.Int, totalSupplys [][]*big.Int, peerSupplys [][]*big.Int) (event.Subscription, error) {

	var tokenidsRule []interface{}
	for _, tokenidsItem := range tokenids {
		tokenidsRule = append(tokenidsRule, tokenidsItem)
	}
	var totalSupplysRule []interface{}
	for _, totalSupplysItem := range totalSupplys {
		totalSupplysRule = append(totalSupplysRule, totalSupplysItem)
	}
	var peerSupplysRule []interface{}
	for _, peerSupplysItem := range peerSupplys {
		peerSupplysRule = append(peerSupplysRule, peerSupplysItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "ClubNFTSetting", tokenidsRule, totalSupplysRule, peerSupplysRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTClubNFTSetting)
				if err := _ClubNFT.contract.UnpackLog(event, "ClubNFTSetting", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClubNFTSetting is a log parse operation binding the contract event 0xe2adb1fb4d82402ed428c00d74112d7361b7552407d76f3a6e9f4ced6878edf7.
//
// Solidity: event ClubNFTSetting(uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] indexed peerSupplys, uint256[] prices)
func (_ClubNFT *ClubNFTFilterer) ParseClubNFTSetting(log types.Log) (*ClubNFTClubNFTSetting, error) {
	event := new(ClubNFTClubNFTSetting)
	if err := _ClubNFT.contract.UnpackLog(event, "ClubNFTSetting", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ClubNFT contract.
type ClubNFTPausedIterator struct {
	Event *ClubNFTPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPaused represents a Paused event raised by the ClubNFT contract.
type ClubNFTPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFT *ClubNFTFilterer) FilterPaused(opts *bind.FilterOpts) (*ClubNFTPausedIterator, error) {

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ClubNFTPausedIterator{contract: _ClubNFT.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFT *ClubNFTFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ClubNFTPaused) (event.Subscription, error) {

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPaused)
				if err := _ClubNFT.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFT *ClubNFTFilterer) ParsePaused(log types.Log) (*ClubNFTPaused, error) {
	event := new(ClubNFTPaused)
	if err := _ClubNFT.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ClubNFT contract.
type ClubNFTRoleAdminChangedIterator struct {
	Event *ClubNFTRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTRoleAdminChanged represents a RoleAdminChanged event raised by the ClubNFT contract.
type ClubNFTRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFT *ClubNFTFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ClubNFTRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTRoleAdminChangedIterator{contract: _ClubNFT.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFT *ClubNFTFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ClubNFTRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTRoleAdminChanged)
				if err := _ClubNFT.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFT *ClubNFTFilterer) ParseRoleAdminChanged(log types.Log) (*ClubNFTRoleAdminChanged, error) {
	event := new(ClubNFTRoleAdminChanged)
	if err := _ClubNFT.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ClubNFT contract.
type ClubNFTRoleGrantedIterator struct {
	Event *ClubNFTRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTRoleGranted represents a RoleGranted event raised by the ClubNFT contract.
type ClubNFTRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClubNFTRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTRoleGrantedIterator{contract: _ClubNFT.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ClubNFTRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTRoleGranted)
				if err := _ClubNFT.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) ParseRoleGranted(log types.Log) (*ClubNFTRoleGranted, error) {
	event := new(ClubNFTRoleGranted)
	if err := _ClubNFT.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ClubNFT contract.
type ClubNFTRoleRevokedIterator struct {
	Event *ClubNFTRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTRoleRevoked represents a RoleRevoked event raised by the ClubNFT contract.
type ClubNFTRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClubNFTRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTRoleRevokedIterator{contract: _ClubNFT.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ClubNFTRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTRoleRevoked)
				if err := _ClubNFT.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFT *ClubNFTFilterer) ParseRoleRevoked(log types.Log) (*ClubNFTRoleRevoked, error) {
	event := new(ClubNFTRoleRevoked)
	if err := _ClubNFT.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the ClubNFT contract.
type ClubNFTTransferBatchIterator struct {
	Event *ClubNFTTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTTransferBatch represents a TransferBatch event raised by the ClubNFT contract.
type ClubNFTTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFT *ClubNFTFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ClubNFTTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTTransferBatchIterator{contract: _ClubNFT.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFT *ClubNFTFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *ClubNFTTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTTransferBatch)
				if err := _ClubNFT.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFT *ClubNFTFilterer) ParseTransferBatch(log types.Log) (*ClubNFTTransferBatch, error) {
	event := new(ClubNFTTransferBatch)
	if err := _ClubNFT.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the ClubNFT contract.
type ClubNFTTransferSingleIterator struct {
	Event *ClubNFTTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTTransferSingle represents a TransferSingle event raised by the ClubNFT contract.
type ClubNFTTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFT *ClubNFTFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ClubNFTTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTTransferSingleIterator{contract: _ClubNFT.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFT *ClubNFTFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *ClubNFTTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTTransferSingle)
				if err := _ClubNFT.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFT *ClubNFTFilterer) ParseTransferSingle(log types.Log) (*ClubNFTTransferSingle, error) {
	event := new(ClubNFTTransferSingle)
	if err := _ClubNFT.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the ClubNFT contract.
type ClubNFTURIIterator struct {
	Event *ClubNFTURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTURI represents a URI event raised by the ClubNFT contract.
type ClubNFTURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFT *ClubNFTFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*ClubNFTURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTURIIterator{contract: _ClubNFT.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFT *ClubNFTFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *ClubNFTURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTURI)
				if err := _ClubNFT.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFT *ClubNFTFilterer) ParseURI(log types.Log) (*ClubNFTURI, error) {
	event := new(ClubNFTURI)
	if err := _ClubNFT.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ClubNFT contract.
type ClubNFTUnpausedIterator struct {
	Event *ClubNFTUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTUnpaused represents a Unpaused event raised by the ClubNFT contract.
type ClubNFTUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFT *ClubNFTFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ClubNFTUnpausedIterator, error) {

	logs, sub, err := _ClubNFT.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ClubNFTUnpausedIterator{contract: _ClubNFT.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFT *ClubNFTFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ClubNFTUnpaused) (event.Subscription, error) {

	logs, sub, err := _ClubNFT.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTUnpaused)
				if err := _ClubNFT.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFT *ClubNFTFilterer) ParseUnpaused(log types.Log) (*ClubNFTUnpaused, error) {
	event := new(ClubNFTUnpaused)
	if err := _ClubNFT.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
