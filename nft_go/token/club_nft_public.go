// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ClubNFTPublicMetaData contains all meta data concerning the ClubNFTPublic contract.
var ClubNFTPublicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"tokenids\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"totalSupplys\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"peerSupplys\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"ClubNFTSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RecipientAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"peerSupplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"setClubNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rPercentage_\",\"type\":\"uint256\"}],\"name\":\"setRPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rRecipientAddress_\",\"type\":\"address\"}],\"name\":\"setRRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientAddress_\",\"type\":\"address\"}],\"name\":\"setRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clubId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ClubNFTPublicABI is the input ABI used to generate the binding from.
// Deprecated: Use ClubNFTPublicMetaData.ABI instead.
var ClubNFTPublicABI = ClubNFTPublicMetaData.ABI

// ClubNFTPublicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ClubNFTPublicMetaData.Bin instead.
var ClubNFTPublicBin = ClubNFTPublicMetaData.Bin

// DeployClubNFTPublic deploys a new Ethereum contract, binding an instance of ClubNFTPublic to it.
func DeployClubNFTPublic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ClubNFTPublic, error) {
	parsed, err := ClubNFTPublicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ClubNFTPublicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ClubNFTPublic{ClubNFTPublicCaller: ClubNFTPublicCaller{contract: contract}, ClubNFTPublicTransactor: ClubNFTPublicTransactor{contract: contract}, ClubNFTPublicFilterer: ClubNFTPublicFilterer{contract: contract}}, nil
}

// ClubNFTPublic is an auto generated Go binding around an Ethereum contract.
type ClubNFTPublic struct {
	ClubNFTPublicCaller     // Read-only binding to the contract
	ClubNFTPublicTransactor // Write-only binding to the contract
	ClubNFTPublicFilterer   // Log filterer for contract events
}

// ClubNFTPublicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClubNFTPublicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTPublicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClubNFTPublicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTPublicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClubNFTPublicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClubNFTPublicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClubNFTPublicSession struct {
	Contract     *ClubNFTPublic    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClubNFTPublicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClubNFTPublicCallerSession struct {
	Contract *ClubNFTPublicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ClubNFTPublicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClubNFTPublicTransactorSession struct {
	Contract     *ClubNFTPublicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ClubNFTPublicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClubNFTPublicRaw struct {
	Contract *ClubNFTPublic // Generic contract binding to access the raw methods on
}

// ClubNFTPublicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClubNFTPublicCallerRaw struct {
	Contract *ClubNFTPublicCaller // Generic read-only contract binding to access the raw methods on
}

// ClubNFTPublicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClubNFTPublicTransactorRaw struct {
	Contract *ClubNFTPublicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClubNFTPublic creates a new instance of ClubNFTPublic, bound to a specific deployed contract.
func NewClubNFTPublic(address common.Address, backend bind.ContractBackend) (*ClubNFTPublic, error) {
	contract, err := bindClubNFTPublic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublic{ClubNFTPublicCaller: ClubNFTPublicCaller{contract: contract}, ClubNFTPublicTransactor: ClubNFTPublicTransactor{contract: contract}, ClubNFTPublicFilterer: ClubNFTPublicFilterer{contract: contract}}, nil
}

// NewClubNFTPublicCaller creates a new read-only instance of ClubNFTPublic, bound to a specific deployed contract.
func NewClubNFTPublicCaller(address common.Address, caller bind.ContractCaller) (*ClubNFTPublicCaller, error) {
	contract, err := bindClubNFTPublic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicCaller{contract: contract}, nil
}

// NewClubNFTPublicTransactor creates a new write-only instance of ClubNFTPublic, bound to a specific deployed contract.
func NewClubNFTPublicTransactor(address common.Address, transactor bind.ContractTransactor) (*ClubNFTPublicTransactor, error) {
	contract, err := bindClubNFTPublic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicTransactor{contract: contract}, nil
}

// NewClubNFTPublicFilterer creates a new log filterer instance of ClubNFTPublic, bound to a specific deployed contract.
func NewClubNFTPublicFilterer(address common.Address, filterer bind.ContractFilterer) (*ClubNFTPublicFilterer, error) {
	contract, err := bindClubNFTPublic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicFilterer{contract: contract}, nil
}

// bindClubNFTPublic binds a generic wrapper to an already deployed contract.
func bindClubNFTPublic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClubNFTPublicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClubNFTPublic *ClubNFTPublicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClubNFTPublic.Contract.ClubNFTPublicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClubNFTPublic *ClubNFTPublicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.ClubNFTPublicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClubNFTPublic *ClubNFTPublicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.ClubNFTPublicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClubNFTPublic *ClubNFTPublicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClubNFTPublic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClubNFTPublic *ClubNFTPublicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClubNFTPublic *ClubNFTPublicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.DEFAULTADMINROLE(&_ClubNFTPublic.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.DEFAULTADMINROLE(&_ClubNFTPublic.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) PAUSERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.PAUSERROLE(&_ClubNFTPublic.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) PAUSERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.PAUSERROLE(&_ClubNFTPublic.CallOpts)
}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCaller) PlatformFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "PlatformFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicSession) PlatformFee() (*big.Int, error) {
	return _ClubNFTPublic.Contract.PlatformFee(&_ClubNFTPublic.CallOpts)
}

// PlatformFee is a free data retrieval call binding the contract method 0x4fcf37fa.
//
// Solidity: function PlatformFee() view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) PlatformFee() (*big.Int, error) {
	return _ClubNFTPublic.Contract.PlatformFee(&_ClubNFTPublic.CallOpts)
}

// RPercentages is a free data retrieval call binding the contract method 0x8881c54b.
//
// Solidity: function RPercentages(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCaller) RPercentages(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "RPercentages", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RPercentages is a free data retrieval call binding the contract method 0x8881c54b.
//
// Solidity: function RPercentages(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicSession) RPercentages(arg0 *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.RPercentages(&_ClubNFTPublic.CallOpts, arg0)
}

// RPercentages is a free data retrieval call binding the contract method 0x8881c54b.
//
// Solidity: function RPercentages(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) RPercentages(arg0 *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.RPercentages(&_ClubNFTPublic.CallOpts, arg0)
}

// RRecipients is a free data retrieval call binding the contract method 0x998929e3.
//
// Solidity: function RRecipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicCaller) RRecipients(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "RRecipients", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RRecipients is a free data retrieval call binding the contract method 0x998929e3.
//
// Solidity: function RRecipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicSession) RRecipients(arg0 *big.Int) (common.Address, error) {
	return _ClubNFTPublic.Contract.RRecipients(&_ClubNFTPublic.CallOpts, arg0)
}

// RRecipients is a free data retrieval call binding the contract method 0x998929e3.
//
// Solidity: function RRecipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) RRecipients(arg0 *big.Int) (common.Address, error) {
	return _ClubNFTPublic.Contract.RRecipients(&_ClubNFTPublic.CallOpts, arg0)
}

// RecipientAmount is a free data retrieval call binding the contract method 0xbfb8ae49.
//
// Solidity: function RecipientAmount(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCaller) RecipientAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "RecipientAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RecipientAmount is a free data retrieval call binding the contract method 0xbfb8ae49.
//
// Solidity: function RecipientAmount(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicSession) RecipientAmount(arg0 *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.RecipientAmount(&_ClubNFTPublic.CallOpts, arg0)
}

// RecipientAmount is a free data retrieval call binding the contract method 0xbfb8ae49.
//
// Solidity: function RecipientAmount(uint256 ) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) RecipientAmount(arg0 *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.RecipientAmount(&_ClubNFTPublic.CallOpts, arg0)
}

// Recipients is a free data retrieval call binding the contract method 0xa1a5bc92.
//
// Solidity: function Recipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicCaller) Recipients(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "Recipients", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Recipients is a free data retrieval call binding the contract method 0xa1a5bc92.
//
// Solidity: function Recipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicSession) Recipients(arg0 *big.Int) (common.Address, error) {
	return _ClubNFTPublic.Contract.Recipients(&_ClubNFTPublic.CallOpts, arg0)
}

// Recipients is a free data retrieval call binding the contract method 0xa1a5bc92.
//
// Solidity: function Recipients(uint256 ) view returns(address)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) Recipients(arg0 *big.Int) (common.Address, error) {
	return _ClubNFTPublic.Contract.Recipients(&_ClubNFTPublic.CallOpts, arg0)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) SIGNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "SIGNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) SIGNERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.SIGNERROLE(&_ClubNFTPublic.CallOpts)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) SIGNERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.SIGNERROLE(&_ClubNFTPublic.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) UPGRADERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "UPGRADER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) UPGRADERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.UPGRADERROLE(&_ClubNFTPublic.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) UPGRADERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.UPGRADERROLE(&_ClubNFTPublic.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) URISETTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "URI_SETTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) URISETTERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.URISETTERROLE(&_ClubNFTPublic.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) URISETTERROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.URISETTERROLE(&_ClubNFTPublic.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) WITHDRAWROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "WITHDRAW_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) WITHDRAWROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.WITHDRAWROLE(&_ClubNFTPublic.CallOpts)
}

// WITHDRAWROLE is a free data retrieval call binding the contract method 0xe02023a1.
//
// Solidity: function WITHDRAW_ROLE() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) WITHDRAWROLE() ([32]byte, error) {
	return _ClubNFTPublic.Contract.WITHDRAWROLE(&_ClubNFTPublic.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.BalanceOf(&_ClubNFTPublic.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.BalanceOf(&_ClubNFTPublic.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFTPublic *ClubNFTPublicCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFTPublic *ClubNFTPublicSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ClubNFTPublic.Contract.BalanceOfBatch(&_ClubNFTPublic.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ClubNFTPublic *ClubNFTPublicCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ClubNFTPublic.Contract.BalanceOfBatch(&_ClubNFTPublic.CallOpts, accounts, ids)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCaller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicSession) Exists(id *big.Int) (bool, error) {
	return _ClubNFTPublic.Contract.Exists(&_ClubNFTPublic.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) Exists(id *big.Int) (bool, error) {
	return _ClubNFTPublic.Contract.Exists(&_ClubNFTPublic.CallOpts, id)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClubNFTPublic.Contract.GetRoleAdmin(&_ClubNFTPublic.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClubNFTPublic.Contract.GetRoleAdmin(&_ClubNFTPublic.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClubNFTPublic.Contract.HasRole(&_ClubNFTPublic.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClubNFTPublic.Contract.HasRole(&_ClubNFTPublic.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ClubNFTPublic.Contract.IsApprovedForAll(&_ClubNFTPublic.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ClubNFTPublic.Contract.IsApprovedForAll(&_ClubNFTPublic.CallOpts, account, operator)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicSession) Paused() (bool, error) {
	return _ClubNFTPublic.Contract.Paused(&_ClubNFTPublic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) Paused() (bool, error) {
	return _ClubNFTPublic.Contract.Paused(&_ClubNFTPublic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicSession) ProxiableUUID() ([32]byte, error) {
	return _ClubNFTPublic.Contract.ProxiableUUID(&_ClubNFTPublic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ClubNFTPublic.Contract.ProxiableUUID(&_ClubNFTPublic.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClubNFTPublic.Contract.SupportsInterface(&_ClubNFTPublic.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClubNFTPublic.Contract.SupportsInterface(&_ClubNFTPublic.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCaller) TotalSupply(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "totalSupply", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.TotalSupply(&_ClubNFTPublic.CallOpts, id)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _ClubNFTPublic.Contract.TotalSupply(&_ClubNFTPublic.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFTPublic *ClubNFTPublicCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _ClubNFTPublic.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFTPublic *ClubNFTPublicSession) Uri(arg0 *big.Int) (string, error) {
	return _ClubNFTPublic.Contract.Uri(&_ClubNFTPublic.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_ClubNFTPublic *ClubNFTPublicCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _ClubNFTPublic.Contract.Uri(&_ClubNFTPublic.CallOpts, arg0)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Burn(&_ClubNFTPublic.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Burn(&_ClubNFTPublic.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.BurnBatch(&_ClubNFTPublic.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.BurnBatch(&_ClubNFTPublic.TransactOpts, account, ids, values)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.GrantRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.GrantRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xf62d1888.
//
// Solidity: function initialize(string uri_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Initialize(opts *bind.TransactOpts, uri_ string) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "initialize", uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf62d1888.
//
// Solidity: function initialize(string uri_) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Initialize(uri_ string) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Initialize(&_ClubNFTPublic.TransactOpts, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf62d1888.
//
// Solidity: function initialize(string uri_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Initialize(uri_ string) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Initialize(&_ClubNFTPublic.TransactOpts, uri_)
}

// Mint is a paid mutator transaction binding the contract method 0x4a9eee69.
//
// Solidity: function mint(uint256 clubId, uint256 tokenId, uint256 amount, bytes sign) payable returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Mint(opts *bind.TransactOpts, clubId *big.Int, tokenId *big.Int, amount *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "mint", clubId, tokenId, amount, sign)
}

// Mint is a paid mutator transaction binding the contract method 0x4a9eee69.
//
// Solidity: function mint(uint256 clubId, uint256 tokenId, uint256 amount, bytes sign) payable returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Mint(clubId *big.Int, tokenId *big.Int, amount *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Mint(&_ClubNFTPublic.TransactOpts, clubId, tokenId, amount, sign)
}

// Mint is a paid mutator transaction binding the contract method 0x4a9eee69.
//
// Solidity: function mint(uint256 clubId, uint256 tokenId, uint256 amount, bytes sign) payable returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Mint(clubId *big.Int, tokenId *big.Int, amount *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Mint(&_ClubNFTPublic.TransactOpts, clubId, tokenId, amount, sign)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Pause() (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Pause(&_ClubNFTPublic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Pause() (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Pause(&_ClubNFTPublic.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.RenounceRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.RenounceRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.RevokeRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.RevokeRole(&_ClubNFTPublic.TransactOpts, role, account)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SafeBatchTransferFrom(&_ClubNFTPublic.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SafeBatchTransferFrom(&_ClubNFTPublic.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SafeTransferFrom(&_ClubNFTPublic.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SafeTransferFrom(&_ClubNFTPublic.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetApprovalForAll(&_ClubNFTPublic.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetApprovalForAll(&_ClubNFTPublic.TransactOpts, operator, approved)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0x7b168295.
//
// Solidity: function setClubNFT(uint256 clubId, uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetClubNFT(opts *bind.TransactOpts, clubId *big.Int, tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setClubNFT", clubId, tokenids, totalSupplys, peerSupplys, prices, sign)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0x7b168295.
//
// Solidity: function setClubNFT(uint256 clubId, uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetClubNFT(clubId *big.Int, tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetClubNFT(&_ClubNFTPublic.TransactOpts, clubId, tokenids, totalSupplys, peerSupplys, prices, sign)
}

// SetClubNFT is a paid mutator transaction binding the contract method 0x7b168295.
//
// Solidity: function setClubNFT(uint256 clubId, uint256[] tokenids, uint256[] totalSupplys, uint256[] peerSupplys, uint256[] prices, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetClubNFT(clubId *big.Int, tokenids []*big.Int, totalSupplys []*big.Int, peerSupplys []*big.Int, prices []*big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetClubNFT(&_ClubNFTPublic.TransactOpts, clubId, tokenids, totalSupplys, peerSupplys, prices, sign)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xcb6dfb1b.
//
// Solidity: function setRPercentage(uint256 clubId, uint256 rPercentage_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetRPercentage(opts *bind.TransactOpts, clubId *big.Int, rPercentage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setRPercentage", clubId, rPercentage_)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xcb6dfb1b.
//
// Solidity: function setRPercentage(uint256 clubId, uint256 rPercentage_) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetRPercentage(clubId *big.Int, rPercentage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRPercentage(&_ClubNFTPublic.TransactOpts, clubId, rPercentage_)
}

// SetRPercentage is a paid mutator transaction binding the contract method 0xcb6dfb1b.
//
// Solidity: function setRPercentage(uint256 clubId, uint256 rPercentage_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetRPercentage(clubId *big.Int, rPercentage_ *big.Int) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRPercentage(&_ClubNFTPublic.TransactOpts, clubId, rPercentage_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x148bf3f2.
//
// Solidity: function setRRecipientAddress(uint256 clubId, address rRecipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetRRecipientAddress(opts *bind.TransactOpts, clubId *big.Int, rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setRRecipientAddress", clubId, rRecipientAddress_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x148bf3f2.
//
// Solidity: function setRRecipientAddress(uint256 clubId, address rRecipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetRRecipientAddress(clubId *big.Int, rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRRecipientAddress(&_ClubNFTPublic.TransactOpts, clubId, rRecipientAddress_)
}

// SetRRecipientAddress is a paid mutator transaction binding the contract method 0x148bf3f2.
//
// Solidity: function setRRecipientAddress(uint256 clubId, address rRecipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetRRecipientAddress(clubId *big.Int, rRecipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRRecipientAddress(&_ClubNFTPublic.TransactOpts, clubId, rRecipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x4da302ed.
//
// Solidity: function setRecipientAddress(uint256 clubId, address recipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetRecipientAddress(opts *bind.TransactOpts, clubId *big.Int, recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setRecipientAddress", clubId, recipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x4da302ed.
//
// Solidity: function setRecipientAddress(uint256 clubId, address recipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetRecipientAddress(clubId *big.Int, recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRecipientAddress(&_ClubNFTPublic.TransactOpts, clubId, recipientAddress_)
}

// SetRecipientAddress is a paid mutator transaction binding the contract method 0x4da302ed.
//
// Solidity: function setRecipientAddress(uint256 clubId, address recipientAddress_) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetRecipientAddress(clubId *big.Int, recipientAddress_ common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetRecipientAddress(&_ClubNFTPublic.TransactOpts, clubId, recipientAddress_)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) SetURI(opts *bind.TransactOpts, newuri string) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "setURI", newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) SetURI(newuri string) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetURI(&_ClubNFTPublic.TransactOpts, newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) SetURI(newuri string) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.SetURI(&_ClubNFTPublic.TransactOpts, newuri)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Unpause() (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Unpause(&_ClubNFTPublic.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Unpause() (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Unpause(&_ClubNFTPublic.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.UpgradeTo(&_ClubNFTPublic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.UpgradeTo(&_ClubNFTPublic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ClubNFTPublic *ClubNFTPublicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.UpgradeToAndCall(&_ClubNFTPublic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.UpgradeToAndCall(&_ClubNFTPublic.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0x030ba25d.
//
// Solidity: function withdraw(uint256 clubId, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactor) Withdraw(opts *bind.TransactOpts, clubId *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.contract.Transact(opts, "withdraw", clubId, sign)
}

// Withdraw is a paid mutator transaction binding the contract method 0x030ba25d.
//
// Solidity: function withdraw(uint256 clubId, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicSession) Withdraw(clubId *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Withdraw(&_ClubNFTPublic.TransactOpts, clubId, sign)
}

// Withdraw is a paid mutator transaction binding the contract method 0x030ba25d.
//
// Solidity: function withdraw(uint256 clubId, bytes sign) returns()
func (_ClubNFTPublic *ClubNFTPublicTransactorSession) Withdraw(clubId *big.Int, sign []byte) (*types.Transaction, error) {
	return _ClubNFTPublic.Contract.Withdraw(&_ClubNFTPublic.TransactOpts, clubId, sign)
}

// ClubNFTPublicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ClubNFTPublic contract.
type ClubNFTPublicAdminChangedIterator struct {
	Event *ClubNFTPublicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicAdminChanged represents a AdminChanged event raised by the ClubNFTPublic contract.
type ClubNFTPublicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ClubNFTPublicAdminChangedIterator, error) {

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicAdminChangedIterator{contract: _ClubNFTPublic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicAdminChanged)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseAdminChanged(log types.Log) (*ClubNFTPublicAdminChanged, error) {
	event := new(ClubNFTPublicAdminChanged)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ClubNFTPublic contract.
type ClubNFTPublicApprovalForAllIterator struct {
	Event *ClubNFTPublicApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicApprovalForAll represents a ApprovalForAll event raised by the ClubNFTPublic contract.
type ClubNFTPublicApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*ClubNFTPublicApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicApprovalForAllIterator{contract: _ClubNFTPublic.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicApprovalForAll)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseApprovalForAll(log types.Log) (*ClubNFTPublicApprovalForAll, error) {
	event := new(ClubNFTPublicApprovalForAll)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ClubNFTPublic contract.
type ClubNFTPublicBeaconUpgradedIterator struct {
	Event *ClubNFTPublicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicBeaconUpgraded represents a BeaconUpgraded event raised by the ClubNFTPublic contract.
type ClubNFTPublicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ClubNFTPublicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicBeaconUpgradedIterator{contract: _ClubNFTPublic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicBeaconUpgraded)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseBeaconUpgraded(log types.Log) (*ClubNFTPublicBeaconUpgraded, error) {
	event := new(ClubNFTPublicBeaconUpgraded)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicClubNFTSettingIterator is returned from FilterClubNFTSetting and is used to iterate over the raw logs and unpacked data for ClubNFTSetting events raised by the ClubNFTPublic contract.
type ClubNFTPublicClubNFTSettingIterator struct {
	Event *ClubNFTPublicClubNFTSetting // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicClubNFTSettingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicClubNFTSetting)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicClubNFTSetting)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicClubNFTSettingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicClubNFTSettingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicClubNFTSetting represents a ClubNFTSetting event raised by the ClubNFTPublic contract.
type ClubNFTPublicClubNFTSetting struct {
	ClubId       *big.Int
	Tokenids     []*big.Int
	TotalSupplys []*big.Int
	PeerSupplys  []*big.Int
	Prices       []*big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterClubNFTSetting is a free log retrieval operation binding the contract event 0x8dbc6660539e8a150126d2b08bf458d62db46dc35877fbab2d1555f3aebd9a11.
//
// Solidity: event ClubNFTSetting(uint256 indexed clubId, uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] peerSupplys, uint256[] prices)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterClubNFTSetting(opts *bind.FilterOpts, clubId []*big.Int, tokenids [][]*big.Int, totalSupplys [][]*big.Int) (*ClubNFTPublicClubNFTSettingIterator, error) {

	var clubIdRule []interface{}
	for _, clubIdItem := range clubId {
		clubIdRule = append(clubIdRule, clubIdItem)
	}
	var tokenidsRule []interface{}
	for _, tokenidsItem := range tokenids {
		tokenidsRule = append(tokenidsRule, tokenidsItem)
	}
	var totalSupplysRule []interface{}
	for _, totalSupplysItem := range totalSupplys {
		totalSupplysRule = append(totalSupplysRule, totalSupplysItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "ClubNFTSetting", clubIdRule, tokenidsRule, totalSupplysRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicClubNFTSettingIterator{contract: _ClubNFTPublic.contract, event: "ClubNFTSetting", logs: logs, sub: sub}, nil
}

// WatchClubNFTSetting is a free log subscription operation binding the contract event 0x8dbc6660539e8a150126d2b08bf458d62db46dc35877fbab2d1555f3aebd9a11.
//
// Solidity: event ClubNFTSetting(uint256 indexed clubId, uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] peerSupplys, uint256[] prices)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchClubNFTSetting(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicClubNFTSetting, clubId []*big.Int, tokenids [][]*big.Int, totalSupplys [][]*big.Int) (event.Subscription, error) {

	var clubIdRule []interface{}
	for _, clubIdItem := range clubId {
		clubIdRule = append(clubIdRule, clubIdItem)
	}
	var tokenidsRule []interface{}
	for _, tokenidsItem := range tokenids {
		tokenidsRule = append(tokenidsRule, tokenidsItem)
	}
	var totalSupplysRule []interface{}
	for _, totalSupplysItem := range totalSupplys {
		totalSupplysRule = append(totalSupplysRule, totalSupplysItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "ClubNFTSetting", clubIdRule, tokenidsRule, totalSupplysRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicClubNFTSetting)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "ClubNFTSetting", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClubNFTSetting is a log parse operation binding the contract event 0x8dbc6660539e8a150126d2b08bf458d62db46dc35877fbab2d1555f3aebd9a11.
//
// Solidity: event ClubNFTSetting(uint256 indexed clubId, uint256[] indexed tokenids, uint256[] indexed totalSupplys, uint256[] peerSupplys, uint256[] prices)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseClubNFTSetting(log types.Log) (*ClubNFTPublicClubNFTSetting, error) {
	event := new(ClubNFTPublicClubNFTSetting)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "ClubNFTSetting", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ClubNFTPublic contract.
type ClubNFTPublicInitializedIterator struct {
	Event *ClubNFTPublicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicInitialized represents a Initialized event raised by the ClubNFTPublic contract.
type ClubNFTPublicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterInitialized(opts *bind.FilterOpts) (*ClubNFTPublicInitializedIterator, error) {

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicInitializedIterator{contract: _ClubNFTPublic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicInitialized) (event.Subscription, error) {

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicInitialized)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseInitialized(log types.Log) (*ClubNFTPublicInitialized, error) {
	event := new(ClubNFTPublicInitialized)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ClubNFTPublic contract.
type ClubNFTPublicPausedIterator struct {
	Event *ClubNFTPublicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicPaused represents a Paused event raised by the ClubNFTPublic contract.
type ClubNFTPublicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterPaused(opts *bind.FilterOpts) (*ClubNFTPublicPausedIterator, error) {

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicPausedIterator{contract: _ClubNFTPublic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicPaused) (event.Subscription, error) {

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicPaused)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParsePaused(log types.Log) (*ClubNFTPublicPaused, error) {
	event := new(ClubNFTPublicPaused)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleAdminChangedIterator struct {
	Event *ClubNFTPublicRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicRoleAdminChanged represents a RoleAdminChanged event raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ClubNFTPublicRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicRoleAdminChangedIterator{contract: _ClubNFTPublic.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicRoleAdminChanged)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseRoleAdminChanged(log types.Log) (*ClubNFTPublicRoleAdminChanged, error) {
	event := new(ClubNFTPublicRoleAdminChanged)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleGrantedIterator struct {
	Event *ClubNFTPublicRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicRoleGranted represents a RoleGranted event raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClubNFTPublicRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicRoleGrantedIterator{contract: _ClubNFTPublic.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicRoleGranted)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseRoleGranted(log types.Log) (*ClubNFTPublicRoleGranted, error) {
	event := new(ClubNFTPublicRoleGranted)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleRevokedIterator struct {
	Event *ClubNFTPublicRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicRoleRevoked represents a RoleRevoked event raised by the ClubNFTPublic contract.
type ClubNFTPublicRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClubNFTPublicRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicRoleRevokedIterator{contract: _ClubNFTPublic.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicRoleRevoked)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseRoleRevoked(log types.Log) (*ClubNFTPublicRoleRevoked, error) {
	event := new(ClubNFTPublicRoleRevoked)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the ClubNFTPublic contract.
type ClubNFTPublicTransferBatchIterator struct {
	Event *ClubNFTPublicTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicTransferBatch represents a TransferBatch event raised by the ClubNFTPublic contract.
type ClubNFTPublicTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ClubNFTPublicTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicTransferBatchIterator{contract: _ClubNFTPublic.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicTransferBatch)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseTransferBatch(log types.Log) (*ClubNFTPublicTransferBatch, error) {
	event := new(ClubNFTPublicTransferBatch)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the ClubNFTPublic contract.
type ClubNFTPublicTransferSingleIterator struct {
	Event *ClubNFTPublicTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicTransferSingle represents a TransferSingle event raised by the ClubNFTPublic contract.
type ClubNFTPublicTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ClubNFTPublicTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicTransferSingleIterator{contract: _ClubNFTPublic.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicTransferSingle)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseTransferSingle(log types.Log) (*ClubNFTPublicTransferSingle, error) {
	event := new(ClubNFTPublicTransferSingle)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the ClubNFTPublic contract.
type ClubNFTPublicURIIterator struct {
	Event *ClubNFTPublicURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicURI represents a URI event raised by the ClubNFTPublic contract.
type ClubNFTPublicURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*ClubNFTPublicURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicURIIterator{contract: _ClubNFTPublic.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicURI)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseURI(log types.Log) (*ClubNFTPublicURI, error) {
	event := new(ClubNFTPublicURI)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ClubNFTPublic contract.
type ClubNFTPublicUnpausedIterator struct {
	Event *ClubNFTPublicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicUnpaused represents a Unpaused event raised by the ClubNFTPublic contract.
type ClubNFTPublicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ClubNFTPublicUnpausedIterator, error) {

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicUnpausedIterator{contract: _ClubNFTPublic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicUnpaused) (event.Subscription, error) {

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicUnpaused)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseUnpaused(log types.Log) (*ClubNFTPublicUnpaused, error) {
	event := new(ClubNFTPublicUnpaused)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClubNFTPublicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ClubNFTPublic contract.
type ClubNFTPublicUpgradedIterator struct {
	Event *ClubNFTPublicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClubNFTPublicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClubNFTPublicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClubNFTPublicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClubNFTPublicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClubNFTPublicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClubNFTPublicUpgraded represents a Upgraded event raised by the ClubNFTPublic contract.
type ClubNFTPublicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ClubNFTPublic *ClubNFTPublicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ClubNFTPublicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ClubNFTPublicUpgradedIterator{contract: _ClubNFTPublic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ClubNFTPublic *ClubNFTPublicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ClubNFTPublicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ClubNFTPublic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClubNFTPublicUpgraded)
				if err := _ClubNFTPublic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ClubNFTPublic *ClubNFTPublicFilterer) ParseUpgraded(log types.Log) (*ClubNFTPublicUpgraded, error) {
	event := new(ClubNFTPublicUpgraded)
	if err := _ClubNFTPublic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
